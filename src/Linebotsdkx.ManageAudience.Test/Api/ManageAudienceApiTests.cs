/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Linebotsdkx.ManageAudience.Client;
using Linebotsdkx.ManageAudience.Api;
// uncomment below to import models
//using Linebotsdkx.ManageAudience.Model;

namespace Linebotsdkx.ManageAudience.Test.Api
{
    /// <summary>
    ///  Class for testing ManageAudienceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ManageAudienceApiTests : IDisposable
    {
        private ManageAudienceApi instance;

        public ManageAudienceApiTests()
        {
            instance = new ManageAudienceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ManageAudienceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ManageAudienceApi
            //Assert.IsType<ManageAudienceApi>(instance);
        }

        /// <summary>
        /// Test ActivateAudienceGroup
        /// </summary>
        [Fact]
        public void ActivateAudienceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long audienceGroupId = null;
            //instance.ActivateAudienceGroup(audienceGroupId);
        }

        /// <summary>
        /// Test AddAudienceToAudienceGroup
        /// </summary>
        [Fact]
        public void AddAudienceToAudienceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest = null;
            //instance.AddAudienceToAudienceGroup(addAudienceToAudienceGroupRequest);
        }

        /// <summary>
        /// Test CreateAudienceGroup
        /// </summary>
        [Fact]
        public void CreateAudienceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateAudienceGroupRequest createAudienceGroupRequest = null;
            //var response = instance.CreateAudienceGroup(createAudienceGroupRequest);
            //Assert.IsType<CreateAudienceGroupResponse>(response);
        }

        /// <summary>
        /// Test CreateClickBasedAudienceGroup
        /// </summary>
        [Fact]
        public void CreateClickBasedAudienceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest = null;
            //var response = instance.CreateClickBasedAudienceGroup(createClickBasedAudienceGroupRequest);
            //Assert.IsType<CreateClickBasedAudienceGroupResponse>(response);
        }

        /// <summary>
        /// Test CreateImpBasedAudienceGroup
        /// </summary>
        [Fact]
        public void CreateImpBasedAudienceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest = null;
            //var response = instance.CreateImpBasedAudienceGroup(createImpBasedAudienceGroupRequest);
            //Assert.IsType<CreateImpBasedAudienceGroupResponse>(response);
        }

        /// <summary>
        /// Test DeleteAudienceGroup
        /// </summary>
        [Fact]
        public void DeleteAudienceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long audienceGroupId = null;
            //instance.DeleteAudienceGroup(audienceGroupId);
        }

        /// <summary>
        /// Test GetAudienceData
        /// </summary>
        [Fact]
        public void GetAudienceDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long audienceGroupId = null;
            //var response = instance.GetAudienceData(audienceGroupId);
            //Assert.IsType<GetAudienceDataResponse>(response);
        }

        /// <summary>
        /// Test GetAudienceGroupAuthorityLevel
        /// </summary>
        [Fact]
        public void GetAudienceGroupAuthorityLevelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAudienceGroupAuthorityLevel();
            //Assert.IsType<GetAudienceGroupAuthorityLevelResponse>(response);
        }

        /// <summary>
        /// Test GetAudienceGroups
        /// </summary>
        [Fact]
        public void GetAudienceGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long page = null;
            //string? description = null;
            //AudienceGroupStatus? status = null;
            //long? size = null;
            //bool? includesExternalPublicGroups = null;
            //AudienceGroupCreateRoute? createRoute = null;
            //var response = instance.GetAudienceGroups(page, description, status, size, includesExternalPublicGroups, createRoute);
            //Assert.IsType<GetAudienceGroupsResponse>(response);
        }

        /// <summary>
        /// Test UpdateAudienceGroupAuthorityLevel
        /// </summary>
        [Fact]
        public void UpdateAudienceGroupAuthorityLevelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest = null;
            //instance.UpdateAudienceGroupAuthorityLevel(updateAudienceGroupAuthorityLevelRequest);
        }

        /// <summary>
        /// Test UpdateAudienceGroupDescription
        /// </summary>
        [Fact]
        public void UpdateAudienceGroupDescriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long audienceGroupId = null;
            //UpdateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest = null;
            //instance.UpdateAudienceGroupDescription(audienceGroupId, updateAudienceGroupDescriptionRequest);
        }
    }
}
