/*
 * LINE Messaging API(Insight)
 *
 * This document describes LINE Messaging API(Insight).
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Insight.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Insight.Model
{
    /// <summary>
    /// Summary of message statistics.
    /// </summary>
    [DataContract(Name = "GetMessageEventResponseOverview")]
    public partial class GetMessageEventResponseOverview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMessageEventResponseOverview" /> class.
        /// </summary>
        /// <param name="requestId">Request ID..</param>
        /// <param name="timestamp">UNIX timestamp for message delivery time in seconds..</param>
        /// <param name="delivered">Number of messages delivered. This property shows values of less than 20. However, if all messages have not been sent, it will be null. .</param>
        /// <param name="uniqueImpression">Number of users who opened the message, meaning they displayed at least 1 bubble..</param>
        /// <param name="uniqueClick">Number of users who opened any URL in the message..</param>
        /// <param name="uniqueMediaPlayed">Number of users who started playing any video or audio in the message..</param>
        /// <param name="uniqueMediaPlayed100Percent">Number of users who played the entirety of any video or audio in the message..</param>
        public GetMessageEventResponseOverview(string requestId = default(string), long timestamp = default(long), long delivered = default(long), long? uniqueImpression = default(long?), long? uniqueClick = default(long?), long? uniqueMediaPlayed = default(long?), long? uniqueMediaPlayed100Percent = default(long?))
        {
            this.RequestId = requestId;
            this.Timestamp = timestamp;
            this.Delivered = delivered;
            this.UniqueImpression = uniqueImpression;
            this.UniqueClick = uniqueClick;
            this.UniqueMediaPlayed = uniqueMediaPlayed;
            this.UniqueMediaPlayed100Percent = uniqueMediaPlayed100Percent;
        }

        /// <summary>
        /// Request ID.
        /// </summary>
        /// <value>Request ID.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// UNIX timestamp for message delivery time in seconds.
        /// </summary>
        /// <value>UNIX timestamp for message delivery time in seconds.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Number of messages delivered. This property shows values of less than 20. However, if all messages have not been sent, it will be null. 
        /// </summary>
        /// <value>Number of messages delivered. This property shows values of less than 20. However, if all messages have not been sent, it will be null. </value>
        [DataMember(Name = "delivered", EmitDefaultValue = false)]
        public long Delivered { get; set; }

        /// <summary>
        /// Number of users who opened the message, meaning they displayed at least 1 bubble.
        /// </summary>
        /// <value>Number of users who opened the message, meaning they displayed at least 1 bubble.</value>
        [DataMember(Name = "uniqueImpression", EmitDefaultValue = true)]
        public long? UniqueImpression { get; set; }

        /// <summary>
        /// Number of users who opened any URL in the message.
        /// </summary>
        /// <value>Number of users who opened any URL in the message.</value>
        [DataMember(Name = "uniqueClick", EmitDefaultValue = true)]
        public long? UniqueClick { get; set; }

        /// <summary>
        /// Number of users who started playing any video or audio in the message.
        /// </summary>
        /// <value>Number of users who started playing any video or audio in the message.</value>
        [DataMember(Name = "uniqueMediaPlayed", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed { get; set; }

        /// <summary>
        /// Number of users who played the entirety of any video or audio in the message.
        /// </summary>
        /// <value>Number of users who played the entirety of any video or audio in the message.</value>
        [DataMember(Name = "uniqueMediaPlayed100Percent", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed100Percent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetMessageEventResponseOverview {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  UniqueImpression: ").Append(UniqueImpression).Append("\n");
            sb.Append("  UniqueClick: ").Append(UniqueClick).Append("\n");
            sb.Append("  UniqueMediaPlayed: ").Append(UniqueMediaPlayed).Append("\n");
            sb.Append("  UniqueMediaPlayed100Percent: ").Append(UniqueMediaPlayed100Percent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
