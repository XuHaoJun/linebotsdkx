/*
 * LIFF server API
 *
 * LIFF Server API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Linebotsdkx.Liff.Client;
using Linebotsdkx.Liff.Model;

namespace Linebotsdkx.Liff.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILiffApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create LIFF app
        /// </summary>
        /// <remarks>
        /// Adding the LIFF app to a channel
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddLiffAppResponse</returns>
        AddLiffAppResponse AddLIFFApp(AddLiffAppRequest addLiffAppRequest, int operationIndex = 0);

        /// <summary>
        /// Create LIFF app
        /// </summary>
        /// <remarks>
        /// Adding the LIFF app to a channel
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddLiffAppResponse</returns>
        ApiResponse<AddLiffAppResponse> AddLIFFAppWithHttpInfo(AddLiffAppRequest addLiffAppRequest, int operationIndex = 0);
        /// <summary>
        /// Delete LIFF app from a channel
        /// </summary>
        /// <remarks>
        /// Deletes a LIFF app from a channel. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteLIFFApp(string liffId, int operationIndex = 0);

        /// <summary>
        /// Delete LIFF app from a channel
        /// </summary>
        /// <remarks>
        /// Deletes a LIFF app from a channel. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLIFFAppWithHttpInfo(string liffId, int operationIndex = 0);
        /// <summary>
        /// Get all LIFF apps
        /// </summary>
        /// <remarks>
        /// Gets information on all the LIFF apps added to the channel.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllLiffAppsResponse</returns>
        GetAllLiffAppsResponse GetAllLIFFApps(int operationIndex = 0);

        /// <summary>
        /// Get all LIFF apps
        /// </summary>
        /// <remarks>
        /// Gets information on all the LIFF apps added to the channel.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllLiffAppsResponse</returns>
        ApiResponse<GetAllLiffAppsResponse> GetAllLIFFAppsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update LIFF app from a channel
        /// </summary>
        /// <remarks>
        /// Update LIFF app settings
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="updateLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateLIFFApp(string liffId, UpdateLiffAppRequest updateLiffAppRequest, int operationIndex = 0);

        /// <summary>
        /// Update LIFF app from a channel
        /// </summary>
        /// <remarks>
        /// Update LIFF app settings
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="updateLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateLIFFAppWithHttpInfo(string liffId, UpdateLiffAppRequest updateLiffAppRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILiffApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create LIFF app
        /// </summary>
        /// <remarks>
        /// Adding the LIFF app to a channel
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddLiffAppResponse</returns>
        System.Threading.Tasks.Task<AddLiffAppResponse> AddLIFFAppAsync(AddLiffAppRequest addLiffAppRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create LIFF app
        /// </summary>
        /// <remarks>
        /// Adding the LIFF app to a channel
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddLiffAppResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddLiffAppResponse>> AddLIFFAppWithHttpInfoAsync(AddLiffAppRequest addLiffAppRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete LIFF app from a channel
        /// </summary>
        /// <remarks>
        /// Deletes a LIFF app from a channel. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLIFFAppAsync(string liffId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete LIFF app from a channel
        /// </summary>
        /// <remarks>
        /// Deletes a LIFF app from a channel. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLIFFAppWithHttpInfoAsync(string liffId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all LIFF apps
        /// </summary>
        /// <remarks>
        /// Gets information on all the LIFF apps added to the channel.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllLiffAppsResponse</returns>
        System.Threading.Tasks.Task<GetAllLiffAppsResponse> GetAllLIFFAppsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all LIFF apps
        /// </summary>
        /// <remarks>
        /// Gets information on all the LIFF apps added to the channel.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllLiffAppsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllLiffAppsResponse>> GetAllLIFFAppsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update LIFF app from a channel
        /// </summary>
        /// <remarks>
        /// Update LIFF app settings
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="updateLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateLIFFAppAsync(string liffId, UpdateLiffAppRequest updateLiffAppRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update LIFF app from a channel
        /// </summary>
        /// <remarks>
        /// Update LIFF app settings
        /// </remarks>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="updateLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLIFFAppWithHttpInfoAsync(string liffId, UpdateLiffAppRequest updateLiffAppRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILiffApi : ILiffApiSync, ILiffApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LiffApi : ILiffApi
    {
        private Linebotsdkx.Liff.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LiffApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LiffApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiffApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LiffApi(string basePath)
        {
            this.Configuration = Linebotsdkx.Liff.Client.Configuration.MergeConfigurations(
                Linebotsdkx.Liff.Client.GlobalConfiguration.Instance,
                new Linebotsdkx.Liff.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Linebotsdkx.Liff.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.Liff.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Linebotsdkx.Liff.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiffApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LiffApi(Linebotsdkx.Liff.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Linebotsdkx.Liff.Client.Configuration.MergeConfigurations(
                Linebotsdkx.Liff.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Linebotsdkx.Liff.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.Liff.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Linebotsdkx.Liff.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiffApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LiffApi(Linebotsdkx.Liff.Client.ISynchronousClient client, Linebotsdkx.Liff.Client.IAsynchronousClient asyncClient, Linebotsdkx.Liff.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Linebotsdkx.Liff.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Linebotsdkx.Liff.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Linebotsdkx.Liff.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Linebotsdkx.Liff.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Linebotsdkx.Liff.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create LIFF app Adding the LIFF app to a channel
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddLiffAppResponse</returns>
        public AddLiffAppResponse AddLIFFApp(AddLiffAppRequest addLiffAppRequest, int operationIndex = 0)
        {
            Linebotsdkx.Liff.Client.ApiResponse<AddLiffAppResponse> localVarResponse = AddLIFFAppWithHttpInfo(addLiffAppRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create LIFF app Adding the LIFF app to a channel
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddLiffAppResponse</returns>
        public Linebotsdkx.Liff.Client.ApiResponse<AddLiffAppResponse> AddLIFFAppWithHttpInfo(AddLiffAppRequest addLiffAppRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addLiffAppRequest' is set
            if (addLiffAppRequest == null)
            {
                throw new Linebotsdkx.Liff.Client.ApiException(400, "Missing required parameter 'addLiffAppRequest' when calling LiffApi->AddLIFFApp");
            }

            Linebotsdkx.Liff.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Liff.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addLiffAppRequest;

            localVarRequestOptions.Operation = "LiffApi.AddLIFFApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddLiffAppResponse>("/liff/v1/apps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLIFFApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create LIFF app Adding the LIFF app to a channel
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddLiffAppResponse</returns>
        public async System.Threading.Tasks.Task<AddLiffAppResponse> AddLIFFAppAsync(AddLiffAppRequest addLiffAppRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.Liff.Client.ApiResponse<AddLiffAppResponse> localVarResponse = await AddLIFFAppWithHttpInfoAsync(addLiffAppRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create LIFF app Adding the LIFF app to a channel
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddLiffAppResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Liff.Client.ApiResponse<AddLiffAppResponse>> AddLIFFAppWithHttpInfoAsync(AddLiffAppRequest addLiffAppRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addLiffAppRequest' is set
            if (addLiffAppRequest == null)
            {
                throw new Linebotsdkx.Liff.Client.ApiException(400, "Missing required parameter 'addLiffAppRequest' when calling LiffApi->AddLIFFApp");
            }


            Linebotsdkx.Liff.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Liff.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addLiffAppRequest;

            localVarRequestOptions.Operation = "LiffApi.AddLIFFApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddLiffAppResponse>("/liff/v1/apps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLIFFApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete LIFF app from a channel Deletes a LIFF app from a channel. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteLIFFApp(string liffId, int operationIndex = 0)
        {
            DeleteLIFFAppWithHttpInfo(liffId);
        }

        /// <summary>
        /// Delete LIFF app from a channel Deletes a LIFF app from a channel. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.Liff.Client.ApiResponse<Object> DeleteLIFFAppWithHttpInfo(string liffId, int operationIndex = 0)
        {
            // verify the required parameter 'liffId' is set
            if (liffId == null)
            {
                throw new Linebotsdkx.Liff.Client.ApiException(400, "Missing required parameter 'liffId' when calling LiffApi->DeleteLIFFApp");
            }

            Linebotsdkx.Liff.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Liff.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("liffId", Linebotsdkx.Liff.Client.ClientUtils.ParameterToString(liffId)); // path parameter

            localVarRequestOptions.Operation = "LiffApi.DeleteLIFFApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/liff/v1/apps/{liffId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLIFFApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete LIFF app from a channel Deletes a LIFF app from a channel. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLIFFAppAsync(string liffId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteLIFFAppWithHttpInfoAsync(liffId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete LIFF app from a channel Deletes a LIFF app from a channel. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Liff.Client.ApiResponse<Object>> DeleteLIFFAppWithHttpInfoAsync(string liffId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'liffId' is set
            if (liffId == null)
            {
                throw new Linebotsdkx.Liff.Client.ApiException(400, "Missing required parameter 'liffId' when calling LiffApi->DeleteLIFFApp");
            }


            Linebotsdkx.Liff.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Liff.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("liffId", Linebotsdkx.Liff.Client.ClientUtils.ParameterToString(liffId)); // path parameter

            localVarRequestOptions.Operation = "LiffApi.DeleteLIFFApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/liff/v1/apps/{liffId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLIFFApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all LIFF apps Gets information on all the LIFF apps added to the channel.
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllLiffAppsResponse</returns>
        public GetAllLiffAppsResponse GetAllLIFFApps(int operationIndex = 0)
        {
            Linebotsdkx.Liff.Client.ApiResponse<GetAllLiffAppsResponse> localVarResponse = GetAllLIFFAppsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all LIFF apps Gets information on all the LIFF apps added to the channel.
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllLiffAppsResponse</returns>
        public Linebotsdkx.Liff.Client.ApiResponse<GetAllLiffAppsResponse> GetAllLIFFAppsWithHttpInfo(int operationIndex = 0)
        {
            Linebotsdkx.Liff.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Liff.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LiffApi.GetAllLIFFApps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllLiffAppsResponse>("/liff/v1/apps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllLIFFApps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all LIFF apps Gets information on all the LIFF apps added to the channel.
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllLiffAppsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllLiffAppsResponse> GetAllLIFFAppsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.Liff.Client.ApiResponse<GetAllLiffAppsResponse> localVarResponse = await GetAllLIFFAppsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all LIFF apps Gets information on all the LIFF apps added to the channel.
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllLiffAppsResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Liff.Client.ApiResponse<GetAllLiffAppsResponse>> GetAllLIFFAppsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Linebotsdkx.Liff.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Liff.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LiffApi.GetAllLIFFApps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllLiffAppsResponse>("/liff/v1/apps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllLIFFApps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update LIFF app from a channel Update LIFF app settings
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="updateLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateLIFFApp(string liffId, UpdateLiffAppRequest updateLiffAppRequest, int operationIndex = 0)
        {
            UpdateLIFFAppWithHttpInfo(liffId, updateLiffAppRequest);
        }

        /// <summary>
        /// Update LIFF app from a channel Update LIFF app settings
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="updateLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.Liff.Client.ApiResponse<Object> UpdateLIFFAppWithHttpInfo(string liffId, UpdateLiffAppRequest updateLiffAppRequest, int operationIndex = 0)
        {
            // verify the required parameter 'liffId' is set
            if (liffId == null)
            {
                throw new Linebotsdkx.Liff.Client.ApiException(400, "Missing required parameter 'liffId' when calling LiffApi->UpdateLIFFApp");
            }

            // verify the required parameter 'updateLiffAppRequest' is set
            if (updateLiffAppRequest == null)
            {
                throw new Linebotsdkx.Liff.Client.ApiException(400, "Missing required parameter 'updateLiffAppRequest' when calling LiffApi->UpdateLIFFApp");
            }

            Linebotsdkx.Liff.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Liff.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("liffId", Linebotsdkx.Liff.Client.ClientUtils.ParameterToString(liffId)); // path parameter
            localVarRequestOptions.Data = updateLiffAppRequest;

            localVarRequestOptions.Operation = "LiffApi.UpdateLIFFApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/liff/v1/apps/{liffId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLIFFApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update LIFF app from a channel Update LIFF app settings
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="updateLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateLIFFAppAsync(string liffId, UpdateLiffAppRequest updateLiffAppRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateLIFFAppWithHttpInfoAsync(liffId, updateLiffAppRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update LIFF app from a channel Update LIFF app settings
        /// </summary>
        /// <exception cref="Linebotsdkx.Liff.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liffId">ID of the LIFF app to be updated</param>
        /// <param name="updateLiffAppRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Liff.Client.ApiResponse<Object>> UpdateLIFFAppWithHttpInfoAsync(string liffId, UpdateLiffAppRequest updateLiffAppRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'liffId' is set
            if (liffId == null)
            {
                throw new Linebotsdkx.Liff.Client.ApiException(400, "Missing required parameter 'liffId' when calling LiffApi->UpdateLIFFApp");
            }

            // verify the required parameter 'updateLiffAppRequest' is set
            if (updateLiffAppRequest == null)
            {
                throw new Linebotsdkx.Liff.Client.ApiException(400, "Missing required parameter 'updateLiffAppRequest' when calling LiffApi->UpdateLIFFApp");
            }


            Linebotsdkx.Liff.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Liff.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Liff.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("liffId", Linebotsdkx.Liff.Client.ClientUtils.ParameterToString(liffId)); // path parameter
            localVarRequestOptions.Data = updateLiffAppRequest;

            localVarRequestOptions.Operation = "LiffApi.UpdateLIFFApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/liff/v1/apps/{liffId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLIFFApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
