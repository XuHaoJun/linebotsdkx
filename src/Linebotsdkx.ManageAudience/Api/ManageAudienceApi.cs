/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Linebotsdkx.ManageAudience.Client;
using Linebotsdkx.ManageAudience.Model;

namespace Linebotsdkx.ManageAudience.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManageAudienceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ActivateAudienceGroup(long audienceGroupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateAudienceGroupWithHttpInfo(long audienceGroupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAudienceToAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddAudienceToAudienceGroup(AddAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAudienceToAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddAudienceToAudienceGroupWithHttpInfo(AddAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for uploading user IDs (by JSON)
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateAudienceGroupResponse</returns>
        CreateAudienceGroupResponse CreateAudienceGroup(CreateAudienceGroupRequest createAudienceGroupRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for uploading user IDs (by JSON)
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateAudienceGroupResponse</returns>
        ApiResponse<CreateAudienceGroupResponse> CreateAudienceGroupWithHttpInfo(CreateAudienceGroupRequest createAudienceGroupRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for click-based retargeting
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClickBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClickBasedAudienceGroupResponse</returns>
        CreateClickBasedAudienceGroupResponse CreateClickBasedAudienceGroup(CreateClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for click-based retargeting
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClickBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClickBasedAudienceGroupResponse</returns>
        ApiResponse<CreateClickBasedAudienceGroupResponse> CreateClickBasedAudienceGroupWithHttpInfo(CreateClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for impression-based retargeting
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImpBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateImpBasedAudienceGroupResponse</returns>
        CreateImpBasedAudienceGroupResponse CreateImpBasedAudienceGroup(CreateImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for impression-based retargeting
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImpBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateImpBasedAudienceGroupResponse</returns>
        ApiResponse<CreateImpBasedAudienceGroupResponse> CreateImpBasedAudienceGroupWithHttpInfo(CreateImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAudienceGroup(long audienceGroupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAudienceGroupWithHttpInfo(long audienceGroupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets audience data.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAudienceDataResponse</returns>
        GetAudienceDataResponse GetAudienceData(long audienceGroupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets audience data.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAudienceDataResponse</returns>
        ApiResponse<GetAudienceDataResponse> GetAudienceDataWithHttpInfo(long audienceGroupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the authority level of the audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAudienceGroupAuthorityLevelResponse</returns>
        GetAudienceGroupAuthorityLevelResponse GetAudienceGroupAuthorityLevel(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the authority level of the audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAudienceGroupAuthorityLevelResponse</returns>
        ApiResponse<GetAudienceGroupAuthorityLevelResponse> GetAudienceGroupAuthorityLevelWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets data for more than one audience.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to return when getting (paginated) results. Must be 1 or higher.</param>
        /// <param name="description">The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="status">The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="size">The number of audiences per page. Default: 20 Max: 40  (optional)</param>
        /// <param name="includesExternalPublicGroups">true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.  (optional)</param>
        /// <param name="createRoute">How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAudienceGroupsResponse</returns>
        GetAudienceGroupsResponse GetAudienceGroups(long page, string? description = default(string?), AudienceGroupStatus? status = default(AudienceGroupStatus?), long? size = default(long?), bool? includesExternalPublicGroups = default(bool?), AudienceGroupCreateRoute? createRoute = default(AudienceGroupCreateRoute?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets data for more than one audience.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to return when getting (paginated) results. Must be 1 or higher.</param>
        /// <param name="description">The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="status">The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="size">The number of audiences per page. Default: 20 Max: 40  (optional)</param>
        /// <param name="includesExternalPublicGroups">true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.  (optional)</param>
        /// <param name="createRoute">How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAudienceGroupsResponse</returns>
        ApiResponse<GetAudienceGroupsResponse> GetAudienceGroupsWithHttpInfo(long page, string? description = default(string?), AudienceGroupStatus? status = default(AudienceGroupStatus?), long? size = default(long?), bool? includesExternalPublicGroups = default(bool?), AudienceGroupCreateRoute? createRoute = default(AudienceGroupCreateRoute?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change the authority level of the audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAudienceGroupAuthorityLevelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateAudienceGroupAuthorityLevel(UpdateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change the authority level of the audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAudienceGroupAuthorityLevelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAudienceGroupAuthorityLevelWithHttpInfo(UpdateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Renames an existing audience.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="updateAudienceGroupDescriptionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateAudienceGroupDescription(long audienceGroupId, UpdateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Renames an existing audience.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="updateAudienceGroupDescriptionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAudienceGroupDescriptionWithHttpInfo(long audienceGroupId, UpdateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManageAudienceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateAudienceGroupAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateAudienceGroupWithHttpInfoAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAudienceToAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddAudienceToAudienceGroupAsync(AddAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAudienceToAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddAudienceToAudienceGroupWithHttpInfoAsync(AddAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for uploading user IDs (by JSON)
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAudienceGroupResponse</returns>
        System.Threading.Tasks.Task<CreateAudienceGroupResponse> CreateAudienceGroupAsync(CreateAudienceGroupRequest createAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for uploading user IDs (by JSON)
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAudienceGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAudienceGroupResponse>> CreateAudienceGroupWithHttpInfoAsync(CreateAudienceGroupRequest createAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for click-based retargeting
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClickBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClickBasedAudienceGroupResponse</returns>
        System.Threading.Tasks.Task<CreateClickBasedAudienceGroupResponse> CreateClickBasedAudienceGroupAsync(CreateClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for click-based retargeting
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClickBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClickBasedAudienceGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClickBasedAudienceGroupResponse>> CreateClickBasedAudienceGroupWithHttpInfoAsync(CreateClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for impression-based retargeting
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImpBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateImpBasedAudienceGroupResponse</returns>
        System.Threading.Tasks.Task<CreateImpBasedAudienceGroupResponse> CreateImpBasedAudienceGroupAsync(CreateImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for impression-based retargeting
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImpBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateImpBasedAudienceGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateImpBasedAudienceGroupResponse>> CreateImpBasedAudienceGroupWithHttpInfoAsync(CreateImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAudienceGroupAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAudienceGroupWithHttpInfoAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets audience data.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAudienceDataResponse</returns>
        System.Threading.Tasks.Task<GetAudienceDataResponse> GetAudienceDataAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets audience data.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAudienceDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAudienceDataResponse>> GetAudienceDataWithHttpInfoAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the authority level of the audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAudienceGroupAuthorityLevelResponse</returns>
        System.Threading.Tasks.Task<GetAudienceGroupAuthorityLevelResponse> GetAudienceGroupAuthorityLevelAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the authority level of the audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAudienceGroupAuthorityLevelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAudienceGroupAuthorityLevelResponse>> GetAudienceGroupAuthorityLevelWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets data for more than one audience.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to return when getting (paginated) results. Must be 1 or higher.</param>
        /// <param name="description">The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="status">The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="size">The number of audiences per page. Default: 20 Max: 40  (optional)</param>
        /// <param name="includesExternalPublicGroups">true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.  (optional)</param>
        /// <param name="createRoute">How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAudienceGroupsResponse</returns>
        System.Threading.Tasks.Task<GetAudienceGroupsResponse> GetAudienceGroupsAsync(long page, string? description = default(string?), AudienceGroupStatus? status = default(AudienceGroupStatus?), long? size = default(long?), bool? includesExternalPublicGroups = default(bool?), AudienceGroupCreateRoute? createRoute = default(AudienceGroupCreateRoute?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets data for more than one audience.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to return when getting (paginated) results. Must be 1 or higher.</param>
        /// <param name="description">The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="status">The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="size">The number of audiences per page. Default: 20 Max: 40  (optional)</param>
        /// <param name="includesExternalPublicGroups">true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.  (optional)</param>
        /// <param name="createRoute">How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAudienceGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAudienceGroupsResponse>> GetAudienceGroupsWithHttpInfoAsync(long page, string? description = default(string?), AudienceGroupStatus? status = default(AudienceGroupStatus?), long? size = default(long?), bool? includesExternalPublicGroups = default(bool?), AudienceGroupCreateRoute? createRoute = default(AudienceGroupCreateRoute?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change the authority level of the audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAudienceGroupAuthorityLevelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAudienceGroupAuthorityLevelAsync(UpdateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change the authority level of the audience
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAudienceGroupAuthorityLevelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAudienceGroupAuthorityLevelWithHttpInfoAsync(UpdateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Renames an existing audience.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="updateAudienceGroupDescriptionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAudienceGroupDescriptionAsync(long audienceGroupId, UpdateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Renames an existing audience.
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="updateAudienceGroupDescriptionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAudienceGroupDescriptionWithHttpInfoAsync(long audienceGroupId, UpdateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManageAudienceApi : IManageAudienceApiSync, IManageAudienceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManageAudienceApi : IManageAudienceApi
    {
        private Linebotsdkx.ManageAudience.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageAudienceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageAudienceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageAudienceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageAudienceApi(string basePath)
        {
            this.Configuration = Linebotsdkx.ManageAudience.Client.Configuration.MergeConfigurations(
                Linebotsdkx.ManageAudience.Client.GlobalConfiguration.Instance,
                new Linebotsdkx.ManageAudience.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Linebotsdkx.ManageAudience.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.ManageAudience.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Linebotsdkx.ManageAudience.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageAudienceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManageAudienceApi(Linebotsdkx.ManageAudience.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Linebotsdkx.ManageAudience.Client.Configuration.MergeConfigurations(
                Linebotsdkx.ManageAudience.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Linebotsdkx.ManageAudience.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.ManageAudience.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Linebotsdkx.ManageAudience.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageAudienceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ManageAudienceApi(Linebotsdkx.ManageAudience.Client.ISynchronousClient client, Linebotsdkx.ManageAudience.Client.IAsynchronousClient asyncClient, Linebotsdkx.ManageAudience.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Linebotsdkx.ManageAudience.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Linebotsdkx.ManageAudience.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Linebotsdkx.ManageAudience.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Linebotsdkx.ManageAudience.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Linebotsdkx.ManageAudience.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Activate audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ActivateAudienceGroup(long audienceGroupId, int operationIndex = 0)
        {
            ActivateAudienceGroupWithHttpInfo(audienceGroupId);
        }

        /// <summary>
        ///  Activate audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<Object> ActivateAudienceGroupWithHttpInfo(long audienceGroupId, int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("audienceGroupId", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(audienceGroupId)); // path parameter

            localVarRequestOptions.Operation = "ManageAudienceApi.ActivateAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v2/bot/audienceGroup/{audienceGroupId}/activate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Activate audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateAudienceGroupAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ActivateAudienceGroupWithHttpInfoAsync(audienceGroupId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Activate audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<Object>> ActivateAudienceGroupWithHttpInfoAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("audienceGroupId", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(audienceGroupId)); // path parameter

            localVarRequestOptions.Operation = "ManageAudienceApi.ActivateAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v2/bot/audienceGroup/{audienceGroupId}/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAudienceToAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddAudienceToAudienceGroup(AddAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest, int operationIndex = 0)
        {
            AddAudienceToAudienceGroupWithHttpInfo(addAudienceToAudienceGroupRequest);
        }

        /// <summary>
        ///  Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAudienceToAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<Object> AddAudienceToAudienceGroupWithHttpInfo(AddAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addAudienceToAudienceGroupRequest' is set
            if (addAudienceToAudienceGroupRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'addAudienceToAudienceGroupRequest' when calling ManageAudienceApi->AddAudienceToAudienceGroup");
            }

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addAudienceToAudienceGroupRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.AddAudienceToAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v2/bot/audienceGroup/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAudienceToAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAudienceToAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddAudienceToAudienceGroupAsync(AddAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddAudienceToAudienceGroupWithHttpInfoAsync(addAudienceToAudienceGroupRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAudienceToAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<Object>> AddAudienceToAudienceGroupWithHttpInfoAsync(AddAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addAudienceToAudienceGroupRequest' is set
            if (addAudienceToAudienceGroupRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'addAudienceToAudienceGroupRequest' when calling ManageAudienceApi->AddAudienceToAudienceGroup");
            }


            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addAudienceToAudienceGroupRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.AddAudienceToAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v2/bot/audienceGroup/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAudienceToAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create audience for uploading user IDs (by JSON)
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateAudienceGroupResponse</returns>
        public CreateAudienceGroupResponse CreateAudienceGroup(CreateAudienceGroupRequest createAudienceGroupRequest, int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<CreateAudienceGroupResponse> localVarResponse = CreateAudienceGroupWithHttpInfo(createAudienceGroupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create audience for uploading user IDs (by JSON)
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateAudienceGroupResponse</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<CreateAudienceGroupResponse> CreateAudienceGroupWithHttpInfo(CreateAudienceGroupRequest createAudienceGroupRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createAudienceGroupRequest' is set
            if (createAudienceGroupRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'createAudienceGroupRequest' when calling ManageAudienceApi->CreateAudienceGroup");
            }

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAudienceGroupRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.CreateAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAudienceGroupResponse>("/v2/bot/audienceGroup/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create audience for uploading user IDs (by JSON)
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAudienceGroupResponse</returns>
        public async System.Threading.Tasks.Task<CreateAudienceGroupResponse> CreateAudienceGroupAsync(CreateAudienceGroupRequest createAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<CreateAudienceGroupResponse> localVarResponse = await CreateAudienceGroupWithHttpInfoAsync(createAudienceGroupRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create audience for uploading user IDs (by JSON)
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAudienceGroupResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<CreateAudienceGroupResponse>> CreateAudienceGroupWithHttpInfoAsync(CreateAudienceGroupRequest createAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createAudienceGroupRequest' is set
            if (createAudienceGroupRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'createAudienceGroupRequest' when calling ManageAudienceApi->CreateAudienceGroup");
            }


            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAudienceGroupRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.CreateAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAudienceGroupResponse>("/v2/bot/audienceGroup/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create audience for click-based retargeting
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClickBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClickBasedAudienceGroupResponse</returns>
        public CreateClickBasedAudienceGroupResponse CreateClickBasedAudienceGroup(CreateClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest, int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<CreateClickBasedAudienceGroupResponse> localVarResponse = CreateClickBasedAudienceGroupWithHttpInfo(createClickBasedAudienceGroupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create audience for click-based retargeting
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClickBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClickBasedAudienceGroupResponse</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<CreateClickBasedAudienceGroupResponse> CreateClickBasedAudienceGroupWithHttpInfo(CreateClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createClickBasedAudienceGroupRequest' is set
            if (createClickBasedAudienceGroupRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'createClickBasedAudienceGroupRequest' when calling ManageAudienceApi->CreateClickBasedAudienceGroup");
            }

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createClickBasedAudienceGroupRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.CreateClickBasedAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClickBasedAudienceGroupResponse>("/v2/bot/audienceGroup/click", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClickBasedAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create audience for click-based retargeting
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClickBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClickBasedAudienceGroupResponse</returns>
        public async System.Threading.Tasks.Task<CreateClickBasedAudienceGroupResponse> CreateClickBasedAudienceGroupAsync(CreateClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<CreateClickBasedAudienceGroupResponse> localVarResponse = await CreateClickBasedAudienceGroupWithHttpInfoAsync(createClickBasedAudienceGroupRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create audience for click-based retargeting
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createClickBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClickBasedAudienceGroupResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<CreateClickBasedAudienceGroupResponse>> CreateClickBasedAudienceGroupWithHttpInfoAsync(CreateClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createClickBasedAudienceGroupRequest' is set
            if (createClickBasedAudienceGroupRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'createClickBasedAudienceGroupRequest' when calling ManageAudienceApi->CreateClickBasedAudienceGroup");
            }


            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createClickBasedAudienceGroupRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.CreateClickBasedAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClickBasedAudienceGroupResponse>("/v2/bot/audienceGroup/click", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClickBasedAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create audience for impression-based retargeting
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImpBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateImpBasedAudienceGroupResponse</returns>
        public CreateImpBasedAudienceGroupResponse CreateImpBasedAudienceGroup(CreateImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest, int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<CreateImpBasedAudienceGroupResponse> localVarResponse = CreateImpBasedAudienceGroupWithHttpInfo(createImpBasedAudienceGroupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create audience for impression-based retargeting
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImpBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateImpBasedAudienceGroupResponse</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<CreateImpBasedAudienceGroupResponse> CreateImpBasedAudienceGroupWithHttpInfo(CreateImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createImpBasedAudienceGroupRequest' is set
            if (createImpBasedAudienceGroupRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'createImpBasedAudienceGroupRequest' when calling ManageAudienceApi->CreateImpBasedAudienceGroup");
            }

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createImpBasedAudienceGroupRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.CreateImpBasedAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateImpBasedAudienceGroupResponse>("/v2/bot/audienceGroup/imp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateImpBasedAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create audience for impression-based retargeting
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImpBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateImpBasedAudienceGroupResponse</returns>
        public async System.Threading.Tasks.Task<CreateImpBasedAudienceGroupResponse> CreateImpBasedAudienceGroupAsync(CreateImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<CreateImpBasedAudienceGroupResponse> localVarResponse = await CreateImpBasedAudienceGroupWithHttpInfoAsync(createImpBasedAudienceGroupRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create audience for impression-based retargeting
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImpBasedAudienceGroupRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateImpBasedAudienceGroupResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<CreateImpBasedAudienceGroupResponse>> CreateImpBasedAudienceGroupWithHttpInfoAsync(CreateImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createImpBasedAudienceGroupRequest' is set
            if (createImpBasedAudienceGroupRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'createImpBasedAudienceGroupRequest' when calling ManageAudienceApi->CreateImpBasedAudienceGroup");
            }


            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createImpBasedAudienceGroupRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.CreateImpBasedAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateImpBasedAudienceGroupResponse>("/v2/bot/audienceGroup/imp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateImpBasedAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAudienceGroup(long audienceGroupId, int operationIndex = 0)
        {
            DeleteAudienceGroupWithHttpInfo(audienceGroupId);
        }

        /// <summary>
        ///  Delete audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<Object> DeleteAudienceGroupWithHttpInfo(long audienceGroupId, int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("audienceGroupId", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(audienceGroupId)); // path parameter

            localVarRequestOptions.Operation = "ManageAudienceApi.DeleteAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/bot/audienceGroup/{audienceGroupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAudienceGroupAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAudienceGroupWithHttpInfoAsync(audienceGroupId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<Object>> DeleteAudienceGroupWithHttpInfoAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("audienceGroupId", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(audienceGroupId)); // path parameter

            localVarRequestOptions.Operation = "ManageAudienceApi.DeleteAudienceGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/bot/audienceGroup/{audienceGroupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAudienceGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets audience data.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAudienceDataResponse</returns>
        public GetAudienceDataResponse GetAudienceData(long audienceGroupId, int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceDataResponse> localVarResponse = GetAudienceDataWithHttpInfo(audienceGroupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets audience data.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAudienceDataResponse</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceDataResponse> GetAudienceDataWithHttpInfo(long audienceGroupId, int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("audienceGroupId", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(audienceGroupId)); // path parameter

            localVarRequestOptions.Operation = "ManageAudienceApi.GetAudienceData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAudienceDataResponse>("/v2/bot/audienceGroup/{audienceGroupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudienceData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets audience data.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAudienceDataResponse</returns>
        public async System.Threading.Tasks.Task<GetAudienceDataResponse> GetAudienceDataAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceDataResponse> localVarResponse = await GetAudienceDataWithHttpInfoAsync(audienceGroupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets audience data.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAudienceDataResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceDataResponse>> GetAudienceDataWithHttpInfoAsync(long audienceGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("audienceGroupId", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(audienceGroupId)); // path parameter

            localVarRequestOptions.Operation = "ManageAudienceApi.GetAudienceData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAudienceDataResponse>("/v2/bot/audienceGroup/{audienceGroupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudienceData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the authority level of the audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAudienceGroupAuthorityLevelResponse</returns>
        public GetAudienceGroupAuthorityLevelResponse GetAudienceGroupAuthorityLevel(int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceGroupAuthorityLevelResponse> localVarResponse = GetAudienceGroupAuthorityLevelWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the authority level of the audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAudienceGroupAuthorityLevelResponse</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceGroupAuthorityLevelResponse> GetAudienceGroupAuthorityLevelWithHttpInfo(int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ManageAudienceApi.GetAudienceGroupAuthorityLevel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAudienceGroupAuthorityLevelResponse>("/v2/bot/audienceGroup/authorityLevel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudienceGroupAuthorityLevel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the authority level of the audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAudienceGroupAuthorityLevelResponse</returns>
        public async System.Threading.Tasks.Task<GetAudienceGroupAuthorityLevelResponse> GetAudienceGroupAuthorityLevelAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceGroupAuthorityLevelResponse> localVarResponse = await GetAudienceGroupAuthorityLevelWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the authority level of the audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAudienceGroupAuthorityLevelResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceGroupAuthorityLevelResponse>> GetAudienceGroupAuthorityLevelWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ManageAudienceApi.GetAudienceGroupAuthorityLevel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAudienceGroupAuthorityLevelResponse>("/v2/bot/audienceGroup/authorityLevel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudienceGroupAuthorityLevel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets data for more than one audience.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to return when getting (paginated) results. Must be 1 or higher.</param>
        /// <param name="description">The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="status">The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="size">The number of audiences per page. Default: 20 Max: 40  (optional)</param>
        /// <param name="includesExternalPublicGroups">true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.  (optional)</param>
        /// <param name="createRoute">How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAudienceGroupsResponse</returns>
        public GetAudienceGroupsResponse GetAudienceGroups(long page, string? description = default(string?), AudienceGroupStatus? status = default(AudienceGroupStatus?), long? size = default(long?), bool? includesExternalPublicGroups = default(bool?), AudienceGroupCreateRoute? createRoute = default(AudienceGroupCreateRoute?), int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceGroupsResponse> localVarResponse = GetAudienceGroupsWithHttpInfo(page, description, status, size, includesExternalPublicGroups, createRoute);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets data for more than one audience.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to return when getting (paginated) results. Must be 1 or higher.</param>
        /// <param name="description">The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="status">The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="size">The number of audiences per page. Default: 20 Max: 40  (optional)</param>
        /// <param name="includesExternalPublicGroups">true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.  (optional)</param>
        /// <param name="createRoute">How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAudienceGroupsResponse</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceGroupsResponse> GetAudienceGroupsWithHttpInfo(long page, string? description = default(string?), AudienceGroupStatus? status = default(AudienceGroupStatus?), long? size = default(long?), bool? includesExternalPublicGroups = default(bool?), AudienceGroupCreateRoute? createRoute = default(AudienceGroupCreateRoute?), int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (includesExternalPublicGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "includesExternalPublicGroups", includesExternalPublicGroups));
            }
            if (createRoute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "createRoute", createRoute));
            }

            localVarRequestOptions.Operation = "ManageAudienceApi.GetAudienceGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAudienceGroupsResponse>("/v2/bot/audienceGroup/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudienceGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets data for more than one audience.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to return when getting (paginated) results. Must be 1 or higher.</param>
        /// <param name="description">The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="status">The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="size">The number of audiences per page. Default: 20 Max: 40  (optional)</param>
        /// <param name="includesExternalPublicGroups">true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.  (optional)</param>
        /// <param name="createRoute">How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAudienceGroupsResponse</returns>
        public async System.Threading.Tasks.Task<GetAudienceGroupsResponse> GetAudienceGroupsAsync(long page, string? description = default(string?), AudienceGroupStatus? status = default(AudienceGroupStatus?), long? size = default(long?), bool? includesExternalPublicGroups = default(bool?), AudienceGroupCreateRoute? createRoute = default(AudienceGroupCreateRoute?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceGroupsResponse> localVarResponse = await GetAudienceGroupsWithHttpInfoAsync(page, description, status, size, includesExternalPublicGroups, createRoute, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets data for more than one audience.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to return when getting (paginated) results. Must be 1 or higher.</param>
        /// <param name="description">The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="status">The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.  (optional)</param>
        /// <param name="size">The number of audiences per page. Default: 20 Max: 40  (optional)</param>
        /// <param name="includesExternalPublicGroups">true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.  (optional)</param>
        /// <param name="createRoute">How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAudienceGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<GetAudienceGroupsResponse>> GetAudienceGroupsWithHttpInfoAsync(long page, string? description = default(string?), AudienceGroupStatus? status = default(AudienceGroupStatus?), long? size = default(long?), bool? includesExternalPublicGroups = default(bool?), AudienceGroupCreateRoute? createRoute = default(AudienceGroupCreateRoute?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (includesExternalPublicGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "includesExternalPublicGroups", includesExternalPublicGroups));
            }
            if (createRoute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToMultiMap("", "createRoute", createRoute));
            }

            localVarRequestOptions.Operation = "ManageAudienceApi.GetAudienceGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAudienceGroupsResponse>("/v2/bot/audienceGroup/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudienceGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Change the authority level of the audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAudienceGroupAuthorityLevelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateAudienceGroupAuthorityLevel(UpdateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest, int operationIndex = 0)
        {
            UpdateAudienceGroupAuthorityLevelWithHttpInfo(updateAudienceGroupAuthorityLevelRequest);
        }

        /// <summary>
        ///  Change the authority level of the audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAudienceGroupAuthorityLevelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<Object> UpdateAudienceGroupAuthorityLevelWithHttpInfo(UpdateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateAudienceGroupAuthorityLevelRequest' is set
            if (updateAudienceGroupAuthorityLevelRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'updateAudienceGroupAuthorityLevelRequest' when calling ManageAudienceApi->UpdateAudienceGroupAuthorityLevel");
            }

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateAudienceGroupAuthorityLevelRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.UpdateAudienceGroupAuthorityLevel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v2/bot/audienceGroup/authorityLevel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAudienceGroupAuthorityLevel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Change the authority level of the audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAudienceGroupAuthorityLevelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAudienceGroupAuthorityLevelAsync(UpdateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateAudienceGroupAuthorityLevelWithHttpInfoAsync(updateAudienceGroupAuthorityLevelRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Change the authority level of the audience
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAudienceGroupAuthorityLevelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<Object>> UpdateAudienceGroupAuthorityLevelWithHttpInfoAsync(UpdateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateAudienceGroupAuthorityLevelRequest' is set
            if (updateAudienceGroupAuthorityLevelRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'updateAudienceGroupAuthorityLevelRequest' when calling ManageAudienceApi->UpdateAudienceGroupAuthorityLevel");
            }


            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateAudienceGroupAuthorityLevelRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.UpdateAudienceGroupAuthorityLevel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v2/bot/audienceGroup/authorityLevel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAudienceGroupAuthorityLevel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Renames an existing audience.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="updateAudienceGroupDescriptionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateAudienceGroupDescription(long audienceGroupId, UpdateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest, int operationIndex = 0)
        {
            UpdateAudienceGroupDescriptionWithHttpInfo(audienceGroupId, updateAudienceGroupDescriptionRequest);
        }

        /// <summary>
        ///  Renames an existing audience.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="updateAudienceGroupDescriptionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<Object> UpdateAudienceGroupDescriptionWithHttpInfo(long audienceGroupId, UpdateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateAudienceGroupDescriptionRequest' is set
            if (updateAudienceGroupDescriptionRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'updateAudienceGroupDescriptionRequest' when calling ManageAudienceApi->UpdateAudienceGroupDescription");
            }

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("audienceGroupId", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(audienceGroupId)); // path parameter
            localVarRequestOptions.Data = updateAudienceGroupDescriptionRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.UpdateAudienceGroupDescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v2/bot/audienceGroup/{audienceGroupId}/updateDescription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAudienceGroupDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Renames an existing audience.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="updateAudienceGroupDescriptionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAudienceGroupDescriptionAsync(long audienceGroupId, UpdateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateAudienceGroupDescriptionWithHttpInfoAsync(audienceGroupId, updateAudienceGroupDescriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Renames an existing audience.
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceGroupId">The audience ID.</param>
        /// <param name="updateAudienceGroupDescriptionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<Object>> UpdateAudienceGroupDescriptionWithHttpInfoAsync(long audienceGroupId, UpdateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateAudienceGroupDescriptionRequest' is set
            if (updateAudienceGroupDescriptionRequest == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'updateAudienceGroupDescriptionRequest' when calling ManageAudienceApi->UpdateAudienceGroupDescription");
            }


            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("audienceGroupId", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(audienceGroupId)); // path parameter
            localVarRequestOptions.Data = updateAudienceGroupDescriptionRequest;

            localVarRequestOptions.Operation = "ManageAudienceApi.UpdateAudienceGroupDescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v2/bot/audienceGroup/{audienceGroupId}/updateDescription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAudienceGroupDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
