/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// GetWebhookEndpointResponse
    /// </summary>
    [DataContract(Name = "GetWebhookEndpointResponse")]
    public partial class GetWebhookEndpointResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWebhookEndpointResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetWebhookEndpointResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWebhookEndpointResponse" /> class.
        /// </summary>
        /// <param name="endpoint">Webhook URL (required).</param>
        /// <param name="active">Webhook usage status. Send a webhook event from the LINE Platform to the webhook URL only if enabled.  &#x60;true&#x60;: Webhook usage is enabled. &#x60;false&#x60;: Webhook usage is disabled.  (required).</param>
        public GetWebhookEndpointResponse(string endpoint = default(string), bool active = default(bool))
        {
            // to ensure "endpoint" is required (not null)
            if (endpoint == null)
            {
                throw new ArgumentNullException("endpoint is a required property for GetWebhookEndpointResponse and cannot be null");
            }
            this.Endpoint = endpoint;
            this.Active = active;
        }

        /// <summary>
        /// Webhook URL
        /// </summary>
        /// <value>Webhook URL</value>
        [DataMember(Name = "endpoint", IsRequired = true, EmitDefaultValue = true)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Webhook usage status. Send a webhook event from the LINE Platform to the webhook URL only if enabled.  &#x60;true&#x60;: Webhook usage is enabled. &#x60;false&#x60;: Webhook usage is disabled. 
        /// </summary>
        /// <value>Webhook usage status. Send a webhook event from the LINE Platform to the webhook URL only if enabled.  &#x60;true&#x60;: Webhook usage is enabled. &#x60;false&#x60;: Webhook usage is disabled. </value>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetWebhookEndpointResponse {\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
