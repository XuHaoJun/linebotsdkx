/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// ImagemapMessage
    /// </summary>
    [DataContract(Name = "ImagemapMessage")]
    public partial class ImagemapMessage : Message, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagemapMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImagemapMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagemapMessage" /> class.
        /// </summary>
        /// <param name="baseUrl">baseUrl (required).</param>
        /// <param name="altText">altText (required).</param>
        /// <param name="baseSize">baseSize (required).</param>
        /// <param name="actions">actions (required).</param>
        /// <param name="video">video.</param>
        /// <param name="type">Type of message (required) (default to &quot;ImagemapMessage&quot;).</param>
        /// <param name="quickReply">quickReply.</param>
        /// <param name="sender">sender.</param>
        public ImagemapMessage(string baseUrl = default(string), string altText = default(string), ImagemapBaseSize baseSize = default(ImagemapBaseSize), List<ImagemapAction> actions = default(List<ImagemapAction>), ImagemapVideo video = default(ImagemapVideo), string type = @"ImagemapMessage", QuickReply quickReply = default(QuickReply), Sender sender = default(Sender)) : base(type, quickReply, sender)
        {
            // to ensure "baseUrl" is required (not null)
            if (baseUrl == null)
            {
                throw new ArgumentNullException("baseUrl is a required property for ImagemapMessage and cannot be null");
            }
            this.BaseUrl = baseUrl;
            // to ensure "altText" is required (not null)
            if (altText == null)
            {
                throw new ArgumentNullException("altText is a required property for ImagemapMessage and cannot be null");
            }
            this.AltText = altText;
            // to ensure "baseSize" is required (not null)
            if (baseSize == null)
            {
                throw new ArgumentNullException("baseSize is a required property for ImagemapMessage and cannot be null");
            }
            this.BaseSize = baseSize;
            // to ensure "actions" is required (not null)
            if (actions == null)
            {
                throw new ArgumentNullException("actions is a required property for ImagemapMessage and cannot be null");
            }
            this.Actions = actions;
            this.Video = video;
        }

        /// <summary>
        /// Gets or Sets BaseUrl
        /// </summary>
        [DataMember(Name = "baseUrl", IsRequired = true, EmitDefaultValue = true)]
        public string BaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets AltText
        /// </summary>
        [DataMember(Name = "altText", IsRequired = true, EmitDefaultValue = true)]
        public string AltText { get; set; }

        /// <summary>
        /// Gets or Sets BaseSize
        /// </summary>
        [DataMember(Name = "baseSize", IsRequired = true, EmitDefaultValue = true)]
        public ImagemapBaseSize BaseSize { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", IsRequired = true, EmitDefaultValue = true)]
        public List<ImagemapAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name = "video", EmitDefaultValue = false)]
        public ImagemapVideo Video { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImagemapMessage {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BaseUrl: ").Append(BaseUrl).Append("\n");
            sb.Append("  AltText: ").Append(AltText).Append("\n");
            sb.Append("  BaseSize: ").Append(BaseSize).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
