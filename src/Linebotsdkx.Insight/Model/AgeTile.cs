/*
 * LINE Messaging API(Insight)
 *
 * This document describes LINE Messaging API(Insight).
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Insight.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Insight.Model
{
    /// <summary>
    /// AgeTile
    /// </summary>
    [DataContract(Name = "AgeTile")]
    public partial class AgeTile : IValidatableObject
    {
        /// <summary>
        /// users&#39; age
        /// </summary>
        /// <value>users&#39; age</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AgeEnum
        {
            /// <summary>
            /// Enum From0to14 for value: from0to14
            /// </summary>
            [EnumMember(Value = "from0to14")]
            From0to14 = 1,

            /// <summary>
            /// Enum From15to19 for value: from15to19
            /// </summary>
            [EnumMember(Value = "from15to19")]
            From15to19 = 2,

            /// <summary>
            /// Enum From20to24 for value: from20to24
            /// </summary>
            [EnumMember(Value = "from20to24")]
            From20to24 = 3,

            /// <summary>
            /// Enum From25to29 for value: from25to29
            /// </summary>
            [EnumMember(Value = "from25to29")]
            From25to29 = 4,

            /// <summary>
            /// Enum From30to34 for value: from30to34
            /// </summary>
            [EnumMember(Value = "from30to34")]
            From30to34 = 5,

            /// <summary>
            /// Enum From35to39 for value: from35to39
            /// </summary>
            [EnumMember(Value = "from35to39")]
            From35to39 = 6,

            /// <summary>
            /// Enum From40to44 for value: from40to44
            /// </summary>
            [EnumMember(Value = "from40to44")]
            From40to44 = 7,

            /// <summary>
            /// Enum From45to49 for value: from45to49
            /// </summary>
            [EnumMember(Value = "from45to49")]
            From45to49 = 8,

            /// <summary>
            /// Enum From50 for value: from50
            /// </summary>
            [EnumMember(Value = "from50")]
            From50 = 9,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 10
        }


        /// <summary>
        /// users&#39; age
        /// </summary>
        /// <value>users&#39; age</value>
        [DataMember(Name = "age", EmitDefaultValue = false)]
        public AgeEnum? Age { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AgeTile" /> class.
        /// </summary>
        /// <param name="age">users&#39; age.</param>
        /// <param name="percentage">Percentage.</param>
        public AgeTile(AgeEnum? age = default(AgeEnum?), double percentage = default(double))
        {
            this.Age = age;
            this.Percentage = percentage;
        }

        /// <summary>
        /// Percentage
        /// </summary>
        /// <value>Percentage</value>
        [DataMember(Name = "percentage", EmitDefaultValue = false)]
        public double Percentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AgeTile {\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
