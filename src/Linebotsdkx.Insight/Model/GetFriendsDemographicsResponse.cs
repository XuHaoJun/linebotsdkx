/*
 * LINE Messaging API(Insight)
 *
 * This document describes LINE Messaging API(Insight).
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Insight.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Insight.Model
{
    /// <summary>
    /// Get friend demographics
    /// </summary>
    [DataContract(Name = "GetFriendsDemographicsResponse")]
    public partial class GetFriendsDemographicsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFriendsDemographicsResponse" /> class.
        /// </summary>
        /// <param name="available">true if friend demographic information is available..</param>
        /// <param name="genders">Percentage per gender..</param>
        /// <param name="ages">Percentage per age group..</param>
        /// <param name="areas">Percentage per area..</param>
        /// <param name="appTypes">Percentage by OS..</param>
        /// <param name="subscriptionPeriods">Percentage per friendship duration..</param>
        public GetFriendsDemographicsResponse(bool available = default(bool), List<GenderTile> genders = default(List<GenderTile>), List<AgeTile> ages = default(List<AgeTile>), List<AreaTile> areas = default(List<AreaTile>), List<AppTypeTile> appTypes = default(List<AppTypeTile>), List<SubscriptionPeriodTile> subscriptionPeriods = default(List<SubscriptionPeriodTile>))
        {
            this.Available = available;
            this.Genders = genders;
            this.Ages = ages;
            this.Areas = areas;
            this.AppTypes = appTypes;
            this.SubscriptionPeriods = subscriptionPeriods;
        }

        /// <summary>
        /// true if friend demographic information is available.
        /// </summary>
        /// <value>true if friend demographic information is available.</value>
        [DataMember(Name = "available", EmitDefaultValue = true)]
        public bool Available { get; set; }

        /// <summary>
        /// Percentage per gender.
        /// </summary>
        /// <value>Percentage per gender.</value>
        [DataMember(Name = "genders", EmitDefaultValue = false)]
        public List<GenderTile> Genders { get; set; }

        /// <summary>
        /// Percentage per age group.
        /// </summary>
        /// <value>Percentage per age group.</value>
        [DataMember(Name = "ages", EmitDefaultValue = false)]
        public List<AgeTile> Ages { get; set; }

        /// <summary>
        /// Percentage per area.
        /// </summary>
        /// <value>Percentage per area.</value>
        [DataMember(Name = "areas", EmitDefaultValue = false)]
        public List<AreaTile> Areas { get; set; }

        /// <summary>
        /// Percentage by OS.
        /// </summary>
        /// <value>Percentage by OS.</value>
        [DataMember(Name = "appTypes", EmitDefaultValue = false)]
        public List<AppTypeTile> AppTypes { get; set; }

        /// <summary>
        /// Percentage per friendship duration.
        /// </summary>
        /// <value>Percentage per friendship duration.</value>
        [DataMember(Name = "subscriptionPeriods", EmitDefaultValue = false)]
        public List<SubscriptionPeriodTile> SubscriptionPeriods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetFriendsDemographicsResponse {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Genders: ").Append(Genders).Append("\n");
            sb.Append("  Ages: ").Append(Ages).Append("\n");
            sb.Append("  Areas: ").Append(Areas).Append("\n");
            sb.Append("  AppTypes: ").Append(AppTypes).Append("\n");
            sb.Append("  SubscriptionPeriods: ").Append(SubscriptionPeriods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
