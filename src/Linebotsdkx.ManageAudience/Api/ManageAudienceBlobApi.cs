/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Linebotsdkx.ManageAudience.Client;
using Linebotsdkx.ManageAudience.Model;

namespace Linebotsdkx.ManageAudience.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManageAudienceBlobApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="audienceGroupId">The audience ID. (optional)</param>
        /// <param name="uploadDescription">The description to register with the job (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddUserIdsToAudience(System.IO.Stream file, long? audienceGroupId = default(long?), string? uploadDescription = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="audienceGroupId">The audience ID. (optional)</param>
        /// <param name="uploadDescription">The description to register with the job (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddUserIdsToAudienceWithHttpInfo(System.IO.Stream file, long? audienceGroupId = default(long?), string? uploadDescription = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for uploading user IDs (by file).
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="description">The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120  (optional)</param>
        /// <param name="isIfaAudience">To specify recipients by IFAs: set &#x60;true&#x60;. To specify recipients by user IDs: set &#x60;false&#x60; or omit isIfaAudience property.  (optional)</param>
        /// <param name="uploadDescription">The description to register for the job (in &#x60;jobs[].description&#x60;).  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateAudienceGroupResponse</returns>
        CreateAudienceGroupResponse CreateAudienceForUploadingUserIds(System.IO.Stream file, string? description = default(string?), bool? isIfaAudience = default(bool?), string? uploadDescription = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for uploading user IDs (by file).
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="description">The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120  (optional)</param>
        /// <param name="isIfaAudience">To specify recipients by IFAs: set &#x60;true&#x60;. To specify recipients by user IDs: set &#x60;false&#x60; or omit isIfaAudience property.  (optional)</param>
        /// <param name="uploadDescription">The description to register for the job (in &#x60;jobs[].description&#x60;).  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateAudienceGroupResponse</returns>
        ApiResponse<CreateAudienceGroupResponse> CreateAudienceForUploadingUserIdsWithHttpInfo(System.IO.Stream file, string? description = default(string?), bool? isIfaAudience = default(bool?), string? uploadDescription = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManageAudienceBlobApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="audienceGroupId">The audience ID. (optional)</param>
        /// <param name="uploadDescription">The description to register with the job (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddUserIdsToAudienceAsync(System.IO.Stream file, long? audienceGroupId = default(long?), string? uploadDescription = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="audienceGroupId">The audience ID. (optional)</param>
        /// <param name="uploadDescription">The description to register with the job (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddUserIdsToAudienceWithHttpInfoAsync(System.IO.Stream file, long? audienceGroupId = default(long?), string? uploadDescription = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for uploading user IDs (by file).
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="description">The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120  (optional)</param>
        /// <param name="isIfaAudience">To specify recipients by IFAs: set &#x60;true&#x60;. To specify recipients by user IDs: set &#x60;false&#x60; or omit isIfaAudience property.  (optional)</param>
        /// <param name="uploadDescription">The description to register for the job (in &#x60;jobs[].description&#x60;).  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAudienceGroupResponse</returns>
        System.Threading.Tasks.Task<CreateAudienceGroupResponse> CreateAudienceForUploadingUserIdsAsync(System.IO.Stream file, string? description = default(string?), bool? isIfaAudience = default(bool?), string? uploadDescription = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create audience for uploading user IDs (by file).
        /// </remarks>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="description">The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120  (optional)</param>
        /// <param name="isIfaAudience">To specify recipients by IFAs: set &#x60;true&#x60;. To specify recipients by user IDs: set &#x60;false&#x60; or omit isIfaAudience property.  (optional)</param>
        /// <param name="uploadDescription">The description to register for the job (in &#x60;jobs[].description&#x60;).  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAudienceGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAudienceGroupResponse>> CreateAudienceForUploadingUserIdsWithHttpInfoAsync(System.IO.Stream file, string? description = default(string?), bool? isIfaAudience = default(bool?), string? uploadDescription = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManageAudienceBlobApi : IManageAudienceBlobApiSync, IManageAudienceBlobApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManageAudienceBlobApi : IManageAudienceBlobApi
    {
        private Linebotsdkx.ManageAudience.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageAudienceBlobApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageAudienceBlobApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageAudienceBlobApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageAudienceBlobApi(string basePath)
        {
            this.Configuration = Linebotsdkx.ManageAudience.Client.Configuration.MergeConfigurations(
                Linebotsdkx.ManageAudience.Client.GlobalConfiguration.Instance,
                new Linebotsdkx.ManageAudience.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Linebotsdkx.ManageAudience.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.ManageAudience.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Linebotsdkx.ManageAudience.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageAudienceBlobApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManageAudienceBlobApi(Linebotsdkx.ManageAudience.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Linebotsdkx.ManageAudience.Client.Configuration.MergeConfigurations(
                Linebotsdkx.ManageAudience.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Linebotsdkx.ManageAudience.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.ManageAudience.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Linebotsdkx.ManageAudience.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageAudienceBlobApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ManageAudienceBlobApi(Linebotsdkx.ManageAudience.Client.ISynchronousClient client, Linebotsdkx.ManageAudience.Client.IAsynchronousClient asyncClient, Linebotsdkx.ManageAudience.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Linebotsdkx.ManageAudience.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Linebotsdkx.ManageAudience.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Linebotsdkx.ManageAudience.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Linebotsdkx.ManageAudience.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Linebotsdkx.ManageAudience.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="audienceGroupId">The audience ID. (optional)</param>
        /// <param name="uploadDescription">The description to register with the job (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddUserIdsToAudience(System.IO.Stream file, long? audienceGroupId = default(long?), string? uploadDescription = default(string?), int operationIndex = 0)
        {
            AddUserIdsToAudienceWithHttpInfo(file, audienceGroupId, uploadDescription);
        }

        /// <summary>
        ///  Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="audienceGroupId">The audience ID. (optional)</param>
        /// <param name="uploadDescription">The description to register with the job (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<Object> AddUserIdsToAudienceWithHttpInfo(System.IO.Stream file, long? audienceGroupId = default(long?), string? uploadDescription = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'file' when calling ManageAudienceBlobApi->AddUserIdsToAudience");
            }

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (audienceGroupId != null)
            {
                localVarRequestOptions.FormParameters.Add("audienceGroupId", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(audienceGroupId)); // form parameter
            }
            if (uploadDescription != null)
            {
                localVarRequestOptions.FormParameters.Add("uploadDescription", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(uploadDescription)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "ManageAudienceBlobApi.AddUserIdsToAudience";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v2/bot/audienceGroup/upload/byFile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserIdsToAudience", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="audienceGroupId">The audience ID. (optional)</param>
        /// <param name="uploadDescription">The description to register with the job (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddUserIdsToAudienceAsync(System.IO.Stream file, long? audienceGroupId = default(long?), string? uploadDescription = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddUserIdsToAudienceWithHttpInfoAsync(file, audienceGroupId, uploadDescription, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="audienceGroupId">The audience ID. (optional)</param>
        /// <param name="uploadDescription">The description to register with the job (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<Object>> AddUserIdsToAudienceWithHttpInfoAsync(System.IO.Stream file, long? audienceGroupId = default(long?), string? uploadDescription = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'file' when calling ManageAudienceBlobApi->AddUserIdsToAudience");
            }


            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (audienceGroupId != null)
            {
                localVarRequestOptions.FormParameters.Add("audienceGroupId", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(audienceGroupId)); // form parameter
            }
            if (uploadDescription != null)
            {
                localVarRequestOptions.FormParameters.Add("uploadDescription", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(uploadDescription)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "ManageAudienceBlobApi.AddUserIdsToAudience";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v2/bot/audienceGroup/upload/byFile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserIdsToAudience", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create audience for uploading user IDs (by file).
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="description">The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120  (optional)</param>
        /// <param name="isIfaAudience">To specify recipients by IFAs: set &#x60;true&#x60;. To specify recipients by user IDs: set &#x60;false&#x60; or omit isIfaAudience property.  (optional)</param>
        /// <param name="uploadDescription">The description to register for the job (in &#x60;jobs[].description&#x60;).  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateAudienceGroupResponse</returns>
        public CreateAudienceGroupResponse CreateAudienceForUploadingUserIds(System.IO.Stream file, string? description = default(string?), bool? isIfaAudience = default(bool?), string? uploadDescription = default(string?), int operationIndex = 0)
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<CreateAudienceGroupResponse> localVarResponse = CreateAudienceForUploadingUserIdsWithHttpInfo(file, description, isIfaAudience, uploadDescription);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create audience for uploading user IDs (by file).
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="description">The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120  (optional)</param>
        /// <param name="isIfaAudience">To specify recipients by IFAs: set &#x60;true&#x60;. To specify recipients by user IDs: set &#x60;false&#x60; or omit isIfaAudience property.  (optional)</param>
        /// <param name="uploadDescription">The description to register for the job (in &#x60;jobs[].description&#x60;).  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateAudienceGroupResponse</returns>
        public Linebotsdkx.ManageAudience.Client.ApiResponse<CreateAudienceGroupResponse> CreateAudienceForUploadingUserIdsWithHttpInfo(System.IO.Stream file, string? description = default(string?), bool? isIfaAudience = default(bool?), string? uploadDescription = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'file' when calling ManageAudienceBlobApi->CreateAudienceForUploadingUserIds");
            }

            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (description != null)
            {
                localVarRequestOptions.FormParameters.Add("description", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(description)); // form parameter
            }
            if (isIfaAudience != null)
            {
                localVarRequestOptions.FormParameters.Add("isIfaAudience", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(isIfaAudience)); // form parameter
            }
            if (uploadDescription != null)
            {
                localVarRequestOptions.FormParameters.Add("uploadDescription", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(uploadDescription)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "ManageAudienceBlobApi.CreateAudienceForUploadingUserIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAudienceGroupResponse>("/v2/bot/audienceGroup/upload/byFile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAudienceForUploadingUserIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create audience for uploading user IDs (by file).
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="description">The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120  (optional)</param>
        /// <param name="isIfaAudience">To specify recipients by IFAs: set &#x60;true&#x60;. To specify recipients by user IDs: set &#x60;false&#x60; or omit isIfaAudience property.  (optional)</param>
        /// <param name="uploadDescription">The description to register for the job (in &#x60;jobs[].description&#x60;).  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAudienceGroupResponse</returns>
        public async System.Threading.Tasks.Task<CreateAudienceGroupResponse> CreateAudienceForUploadingUserIdsAsync(System.IO.Stream file, string? description = default(string?), bool? isIfaAudience = default(bool?), string? uploadDescription = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.ManageAudience.Client.ApiResponse<CreateAudienceGroupResponse> localVarResponse = await CreateAudienceForUploadingUserIdsWithHttpInfoAsync(file, description, isIfaAudience, uploadDescription, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create audience for uploading user IDs (by file).
        /// </summary>
        /// <exception cref="Linebotsdkx.ManageAudience.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000 </param>
        /// <param name="description">The audience&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120  (optional)</param>
        /// <param name="isIfaAudience">To specify recipients by IFAs: set &#x60;true&#x60;. To specify recipients by user IDs: set &#x60;false&#x60; or omit isIfaAudience property.  (optional)</param>
        /// <param name="uploadDescription">The description to register for the job (in &#x60;jobs[].description&#x60;).  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAudienceGroupResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ManageAudience.Client.ApiResponse<CreateAudienceGroupResponse>> CreateAudienceForUploadingUserIdsWithHttpInfoAsync(System.IO.Stream file, string? description = default(string?), bool? isIfaAudience = default(bool?), string? uploadDescription = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Linebotsdkx.ManageAudience.Client.ApiException(400, "Missing required parameter 'file' when calling ManageAudienceBlobApi->CreateAudienceForUploadingUserIds");
            }


            Linebotsdkx.ManageAudience.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ManageAudience.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ManageAudience.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (description != null)
            {
                localVarRequestOptions.FormParameters.Add("description", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(description)); // form parameter
            }
            if (isIfaAudience != null)
            {
                localVarRequestOptions.FormParameters.Add("isIfaAudience", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(isIfaAudience)); // form parameter
            }
            if (uploadDescription != null)
            {
                localVarRequestOptions.FormParameters.Add("uploadDescription", Linebotsdkx.ManageAudience.Client.ClientUtils.ParameterToString(uploadDescription)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "ManageAudienceBlobApi.CreateAudienceForUploadingUserIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAudienceGroupResponse>("/v2/bot/audienceGroup/upload/byFile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAudienceForUploadingUserIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
