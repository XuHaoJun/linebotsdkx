/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// FlexSpan
    /// </summary>
    [DataContract(Name = "FlexSpan")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class FlexSpan : FlexComponent, IValidatableObject
    {
        /// <summary>
        /// Defines Weight
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WeightEnum
        {
            /// <summary>
            /// Enum Regular for value: regular
            /// </summary>
            [EnumMember(Value = "regular")]
            Regular = 1,

            /// <summary>
            /// Enum Bold for value: bold
            /// </summary>
            [EnumMember(Value = "bold")]
            Bold = 2
        }


        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public WeightEnum? Weight { get; set; }
        /// <summary>
        /// Defines Style
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StyleEnum
        {
            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            [EnumMember(Value = "normal")]
            Normal = 1,

            /// <summary>
            /// Enum Italic for value: italic
            /// </summary>
            [EnumMember(Value = "italic")]
            Italic = 2
        }


        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name = "style", EmitDefaultValue = false)]
        public StyleEnum? Style { get; set; }
        /// <summary>
        /// Defines Decoration
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DecorationEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Underline for value: underline
            /// </summary>
            [EnumMember(Value = "underline")]
            Underline = 2,

            /// <summary>
            /// Enum LineThrough for value: line-through
            /// </summary>
            [EnumMember(Value = "line-through")]
            LineThrough = 3
        }


        /// <summary>
        /// Gets or Sets Decoration
        /// </summary>
        [DataMember(Name = "decoration", EmitDefaultValue = false)]
        public DecorationEnum? Decoration { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexSpan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlexSpan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexSpan" /> class.
        /// </summary>
        /// <param name="text">text.</param>
        /// <param name="size">size.</param>
        /// <param name="color">color.</param>
        /// <param name="weight">weight.</param>
        /// <param name="style">style.</param>
        /// <param name="decoration">decoration.</param>
        /// <param name="type">type (required) (default to &quot;FlexSpan&quot;).</param>
        public FlexSpan(string text = default(string), string size = default(string), string color = default(string), WeightEnum? weight = default(WeightEnum?), StyleEnum? style = default(StyleEnum?), DecorationEnum? decoration = default(DecorationEnum?), string type = @"FlexSpan") : base(type)
        {
            this.Text = text;
            this.Size = size;
            this.Color = color;
            this.Weight = weight;
            this.Style = style;
            this.Decoration = decoration;
        }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlexSpan {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Decoration: ").Append(Decoration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
