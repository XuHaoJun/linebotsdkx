/*
 * LINE Messaging API(Insight)
 *
 * This document describes LINE Messaging API(Insight).
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Insight.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Insight.Model
{
    /// <summary>
    /// GetMessageEventResponseMessage
    /// </summary>
    [DataContract(Name = "GetMessageEventResponseMessage")]
    public partial class GetMessageEventResponseMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMessageEventResponseMessage" /> class.
        /// </summary>
        /// <param name="seq">Bubble&#39;s serial number..</param>
        /// <param name="impression">Number of times the bubble was displayed..</param>
        /// <param name="mediaPlayed">Number of times audio or video in the bubble started playing..</param>
        /// <param name="mediaPlayed25Percent">Number of times audio or video in the bubble started playing and was played 25% of the total time..</param>
        /// <param name="mediaPlayed50Percent">Number of times audio or video in the bubble started playing and was played 50% of the total time..</param>
        /// <param name="mediaPlayed75Percent">Number of times audio or video in the bubble started playing and was played 75% of the total time..</param>
        /// <param name="mediaPlayed100Percent">Number of times audio or video in the bubble started playing and was played 100% of the total time..</param>
        /// <param name="uniqueMediaPlayed">Number of users that started playing audio or video in the bubble..</param>
        /// <param name="uniqueMediaPlayed25Percent">Number of users that started playing audio or video in the bubble and played 25% of the total time..</param>
        /// <param name="uniqueMediaPlayed50Percent">Number of users that started playing audio or video in the bubble and played 50% of the total time..</param>
        /// <param name="uniqueMediaPlayed75Percent">Number of users that started playing audio or video in the bubble and played 75% of the total time..</param>
        /// <param name="uniqueMediaPlayed100Percent">Number of users that started playing audio or video in the bubble and played 100% of the total time..</param>
        public GetMessageEventResponseMessage(int seq = default(int), long? impression = default(long?), long? mediaPlayed = default(long?), long? mediaPlayed25Percent = default(long?), long? mediaPlayed50Percent = default(long?), long? mediaPlayed75Percent = default(long?), long? mediaPlayed100Percent = default(long?), long? uniqueMediaPlayed = default(long?), long? uniqueMediaPlayed25Percent = default(long?), long? uniqueMediaPlayed50Percent = default(long?), long? uniqueMediaPlayed75Percent = default(long?), long? uniqueMediaPlayed100Percent = default(long?))
        {
            this.Seq = seq;
            this.Impression = impression;
            this.MediaPlayed = mediaPlayed;
            this.MediaPlayed25Percent = mediaPlayed25Percent;
            this.MediaPlayed50Percent = mediaPlayed50Percent;
            this.MediaPlayed75Percent = mediaPlayed75Percent;
            this.MediaPlayed100Percent = mediaPlayed100Percent;
            this.UniqueMediaPlayed = uniqueMediaPlayed;
            this.UniqueMediaPlayed25Percent = uniqueMediaPlayed25Percent;
            this.UniqueMediaPlayed50Percent = uniqueMediaPlayed50Percent;
            this.UniqueMediaPlayed75Percent = uniqueMediaPlayed75Percent;
            this.UniqueMediaPlayed100Percent = uniqueMediaPlayed100Percent;
        }

        /// <summary>
        /// Bubble&#39;s serial number.
        /// </summary>
        /// <value>Bubble&#39;s serial number.</value>
        [DataMember(Name = "seq", EmitDefaultValue = false)]
        public int Seq { get; set; }

        /// <summary>
        /// Number of times the bubble was displayed.
        /// </summary>
        /// <value>Number of times the bubble was displayed.</value>
        [DataMember(Name = "impression", EmitDefaultValue = true)]
        public long? Impression { get; set; }

        /// <summary>
        /// Number of times audio or video in the bubble started playing.
        /// </summary>
        /// <value>Number of times audio or video in the bubble started playing.</value>
        [DataMember(Name = "mediaPlayed", EmitDefaultValue = true)]
        public long? MediaPlayed { get; set; }

        /// <summary>
        /// Number of times audio or video in the bubble started playing and was played 25% of the total time.
        /// </summary>
        /// <value>Number of times audio or video in the bubble started playing and was played 25% of the total time.</value>
        [DataMember(Name = "mediaPlayed25Percent", EmitDefaultValue = true)]
        public long? MediaPlayed25Percent { get; set; }

        /// <summary>
        /// Number of times audio or video in the bubble started playing and was played 50% of the total time.
        /// </summary>
        /// <value>Number of times audio or video in the bubble started playing and was played 50% of the total time.</value>
        [DataMember(Name = "mediaPlayed50Percent", EmitDefaultValue = true)]
        public long? MediaPlayed50Percent { get; set; }

        /// <summary>
        /// Number of times audio or video in the bubble started playing and was played 75% of the total time.
        /// </summary>
        /// <value>Number of times audio or video in the bubble started playing and was played 75% of the total time.</value>
        [DataMember(Name = "mediaPlayed75Percent", EmitDefaultValue = true)]
        public long? MediaPlayed75Percent { get; set; }

        /// <summary>
        /// Number of times audio or video in the bubble started playing and was played 100% of the total time.
        /// </summary>
        /// <value>Number of times audio or video in the bubble started playing and was played 100% of the total time.</value>
        [DataMember(Name = "mediaPlayed100Percent", EmitDefaultValue = true)]
        public long? MediaPlayed100Percent { get; set; }

        /// <summary>
        /// Number of users that started playing audio or video in the bubble.
        /// </summary>
        /// <value>Number of users that started playing audio or video in the bubble.</value>
        [DataMember(Name = "uniqueMediaPlayed", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed { get; set; }

        /// <summary>
        /// Number of users that started playing audio or video in the bubble and played 25% of the total time.
        /// </summary>
        /// <value>Number of users that started playing audio or video in the bubble and played 25% of the total time.</value>
        [DataMember(Name = "uniqueMediaPlayed25Percent", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed25Percent { get; set; }

        /// <summary>
        /// Number of users that started playing audio or video in the bubble and played 50% of the total time.
        /// </summary>
        /// <value>Number of users that started playing audio or video in the bubble and played 50% of the total time.</value>
        [DataMember(Name = "uniqueMediaPlayed50Percent", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed50Percent { get; set; }

        /// <summary>
        /// Number of users that started playing audio or video in the bubble and played 75% of the total time.
        /// </summary>
        /// <value>Number of users that started playing audio or video in the bubble and played 75% of the total time.</value>
        [DataMember(Name = "uniqueMediaPlayed75Percent", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed75Percent { get; set; }

        /// <summary>
        /// Number of users that started playing audio or video in the bubble and played 100% of the total time.
        /// </summary>
        /// <value>Number of users that started playing audio or video in the bubble and played 100% of the total time.</value>
        [DataMember(Name = "uniqueMediaPlayed100Percent", EmitDefaultValue = true)]
        public long? UniqueMediaPlayed100Percent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetMessageEventResponseMessage {\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  Impression: ").Append(Impression).Append("\n");
            sb.Append("  MediaPlayed: ").Append(MediaPlayed).Append("\n");
            sb.Append("  MediaPlayed25Percent: ").Append(MediaPlayed25Percent).Append("\n");
            sb.Append("  MediaPlayed50Percent: ").Append(MediaPlayed50Percent).Append("\n");
            sb.Append("  MediaPlayed75Percent: ").Append(MediaPlayed75Percent).Append("\n");
            sb.Append("  MediaPlayed100Percent: ").Append(MediaPlayed100Percent).Append("\n");
            sb.Append("  UniqueMediaPlayed: ").Append(UniqueMediaPlayed).Append("\n");
            sb.Append("  UniqueMediaPlayed25Percent: ").Append(UniqueMediaPlayed25Percent).Append("\n");
            sb.Append("  UniqueMediaPlayed50Percent: ").Append(UniqueMediaPlayed50Percent).Append("\n");
            sb.Append("  UniqueMediaPlayed75Percent: ").Append(UniqueMediaPlayed75Percent).Append("\n");
            sb.Append("  UniqueMediaPlayed100Percent: ").Append(UniqueMediaPlayed100Percent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
