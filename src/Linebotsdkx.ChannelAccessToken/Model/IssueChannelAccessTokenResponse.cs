/*
 * Channel Access Token API
 *
 * This document describes Channel Access Token API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.ChannelAccessToken.Client.OpenAPIDateConverter;

namespace Linebotsdkx.ChannelAccessToken.Model
{
    /// <summary>
    /// Issued channel access token
    /// </summary>
    [DataContract(Name = "IssueChannelAccessTokenResponse")]
    public partial class IssueChannelAccessTokenResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueChannelAccessTokenResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IssueChannelAccessTokenResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueChannelAccessTokenResponse" /> class.
        /// </summary>
        /// <param name="accessToken">Channel access token.  (required).</param>
        /// <param name="expiresIn">Amount of time in seconds from issue to expiration of the channel access token (required).</param>
        /// <param name="tokenType">A token type. (required) (default to &quot;Bearer&quot;).</param>
        /// <param name="keyId">Unique key ID for identifying the channel access token. (required).</param>
        public IssueChannelAccessTokenResponse(string accessToken = default(string), int expiresIn = default(int), string tokenType = @"Bearer", string keyId = default(string))
        {
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new ArgumentNullException("accessToken is a required property for IssueChannelAccessTokenResponse and cannot be null");
            }
            this.AccessToken = accessToken;
            this.ExpiresIn = expiresIn;
            // to ensure "tokenType" is required (not null)
            if (tokenType == null)
            {
                throw new ArgumentNullException("tokenType is a required property for IssueChannelAccessTokenResponse and cannot be null");
            }
            this.TokenType = tokenType;
            // to ensure "keyId" is required (not null)
            if (keyId == null)
            {
                throw new ArgumentNullException("keyId is a required property for IssueChannelAccessTokenResponse and cannot be null");
            }
            this.KeyId = keyId;
        }

        /// <summary>
        /// Channel access token. 
        /// </summary>
        /// <value>Channel access token. </value>
        [DataMember(Name = "access_token", IsRequired = true, EmitDefaultValue = true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Amount of time in seconds from issue to expiration of the channel access token
        /// </summary>
        /// <value>Amount of time in seconds from issue to expiration of the channel access token</value>
        [DataMember(Name = "expires_in", IsRequired = true, EmitDefaultValue = true)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// A token type.
        /// </summary>
        /// <value>A token type.</value>
        [DataMember(Name = "token_type", IsRequired = true, EmitDefaultValue = true)]
        public string TokenType { get; set; }

        /// <summary>
        /// Unique key ID for identifying the channel access token.
        /// </summary>
        /// <value>Unique key ID for identifying the channel access token.</value>
        [DataMember(Name = "key_id", IsRequired = true, EmitDefaultValue = true)]
        public string KeyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueChannelAccessTokenResponse {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
