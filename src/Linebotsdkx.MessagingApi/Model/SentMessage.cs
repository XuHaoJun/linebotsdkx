/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// SentMessage
    /// </summary>
    [DataContract(Name = "SentMessage")]
    public partial class SentMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SentMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SentMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SentMessage" /> class.
        /// </summary>
        /// <param name="id">ID of the sent message. (required).</param>
        /// <param name="quoteToken">Quote token of the message. Only included when a message object that can be specified as a quote target was sent as a push or reply message. .</param>
        public SentMessage(string id = default(string), string quoteToken = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SentMessage and cannot be null");
            }
            this.Id = id;
            this.QuoteToken = quoteToken;
        }

        /// <summary>
        /// ID of the sent message.
        /// </summary>
        /// <value>ID of the sent message.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Quote token of the message. Only included when a message object that can be specified as a quote target was sent as a push or reply message. 
        /// </summary>
        /// <value>Quote token of the message. Only included when a message object that can be specified as a quote target was sent as a push or reply message. </value>
        [DataMember(Name = "quoteToken", EmitDefaultValue = false)]
        public string QuoteToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SentMessage {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  QuoteToken: ").Append(QuoteToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
