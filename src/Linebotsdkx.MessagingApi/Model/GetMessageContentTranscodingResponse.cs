/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// Transcoding response
    /// </summary>
    [DataContract(Name = "GetMessageContentTranscodingResponse")]
    public partial class GetMessageContentTranscodingResponse : IValidatableObject
    {
        /// <summary>
        /// The preparation status. One of:  &#x60;processing&#x60;: Preparing to get content. &#x60;succeeded&#x60;: Ready to get the content. You can get the content sent by users. &#x60;failed&#x60;: Failed to prepare to get the content. 
        /// </summary>
        /// <value>The preparation status. One of:  &#x60;processing&#x60;: Preparing to get content. &#x60;succeeded&#x60;: Ready to get the content. You can get the content sent by users. &#x60;failed&#x60;: Failed to prepare to get the content. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 1,

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 2,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 3
        }


        /// <summary>
        /// The preparation status. One of:  &#x60;processing&#x60;: Preparing to get content. &#x60;succeeded&#x60;: Ready to get the content. You can get the content sent by users. &#x60;failed&#x60;: Failed to prepare to get the content. 
        /// </summary>
        /// <value>The preparation status. One of:  &#x60;processing&#x60;: Preparing to get content. &#x60;succeeded&#x60;: Ready to get the content. You can get the content sent by users. &#x60;failed&#x60;: Failed to prepare to get the content. </value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMessageContentTranscodingResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetMessageContentTranscodingResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMessageContentTranscodingResponse" /> class.
        /// </summary>
        /// <param name="status">The preparation status. One of:  &#x60;processing&#x60;: Preparing to get content. &#x60;succeeded&#x60;: Ready to get the content. You can get the content sent by users. &#x60;failed&#x60;: Failed to prepare to get the content.  (required).</param>
        public GetMessageContentTranscodingResponse(StatusEnum status = default(StatusEnum))
        {
            this.Status = status;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetMessageContentTranscodingResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
