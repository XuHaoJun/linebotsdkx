/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Webhook.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Webhook.Model
{
    /// <summary>
    /// RoomSource
    /// </summary>
    [DataContract(Name = "RoomSource")]
    public partial class RoomSource : Source, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoomSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RoomSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoomSource" /> class.
        /// </summary>
        /// <param name="userId">ID of the source user. Only included in message events. Only users of LINE for iOS and LINE for Android are included in userId..</param>
        /// <param name="roomId">Room ID of the source multi-person chat (required).</param>
        /// <param name="type">source type (required) (default to &quot;RoomSource&quot;).</param>
        public RoomSource(string userId = default(string), string roomId = default(string), string type = @"RoomSource") : base(type)
        {
            // to ensure "roomId" is required (not null)
            if (roomId == null)
            {
                throw new ArgumentNullException("roomId is a required property for RoomSource and cannot be null");
            }
            this.RoomId = roomId;
            this.UserId = userId;
        }

        /// <summary>
        /// ID of the source user. Only included in message events. Only users of LINE for iOS and LINE for Android are included in userId.
        /// </summary>
        /// <value>ID of the source user. Only included in message events. Only users of LINE for iOS and LINE for Android are included in userId.</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Room ID of the source multi-person chat
        /// </summary>
        /// <value>Room ID of the source multi-person chat</value>
        [DataMember(Name = "roomId", IsRequired = true, EmitDefaultValue = true)]
        public string RoomId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoomSource {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
