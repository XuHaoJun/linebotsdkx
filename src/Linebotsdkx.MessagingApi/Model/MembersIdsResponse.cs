/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// MembersIdsResponse
    /// </summary>
    [DataContract(Name = "MembersIdsResponse")]
    public partial class MembersIdsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MembersIdsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MembersIdsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MembersIdsResponse" /> class.
        /// </summary>
        /// <param name="memberIds">List of user IDs of members in the group chat. Only users of LINE for iOS and LINE for Android are included in &#x60;memberIds&#x60;. (required).</param>
        /// <param name="next">A continuation token to get the next array of user IDs of the members in the group chat. Returned only when there are remaining user IDs that were not returned in &#x60;memberIds&#x60; in the original request. .</param>
        public MembersIdsResponse(List<string> memberIds = default(List<string>), string next = default(string))
        {
            // to ensure "memberIds" is required (not null)
            if (memberIds == null)
            {
                throw new ArgumentNullException("memberIds is a required property for MembersIdsResponse and cannot be null");
            }
            this.MemberIds = memberIds;
            this.Next = next;
        }

        /// <summary>
        /// List of user IDs of members in the group chat. Only users of LINE for iOS and LINE for Android are included in &#x60;memberIds&#x60;.
        /// </summary>
        /// <value>List of user IDs of members in the group chat. Only users of LINE for iOS and LINE for Android are included in &#x60;memberIds&#x60;.</value>
        [DataMember(Name = "memberIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> MemberIds { get; set; }

        /// <summary>
        /// A continuation token to get the next array of user IDs of the members in the group chat. Returned only when there are remaining user IDs that were not returned in &#x60;memberIds&#x60; in the original request. 
        /// </summary>
        /// <value>A continuation token to get the next array of user IDs of the members in the group chat. Returned only when there are remaining user IDs that were not returned in &#x60;memberIds&#x60; in the original request. </value>
        [DataMember(Name = "next", EmitDefaultValue = false)]
        public string Next { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MembersIdsResponse {\n");
            sb.Append("  MemberIds: ").Append(MemberIds).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
