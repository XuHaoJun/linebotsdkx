/*
 * LIFF server API
 *
 * LIFF Server API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Liff.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Liff.Model
{
    /// <summary>
    /// UpdateLiffAppRequest
    /// </summary>
    [DataContract(Name = "UpdateLiffAppRequest")]
    public partial class UpdateLiffAppRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BotPrompt
        /// </summary>
        [DataMember(Name = "botPrompt", EmitDefaultValue = false)]
        public LiffBotPrompt? BotPrompt { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateLiffAppRequest" /> class.
        /// </summary>
        /// <param name="view">view.</param>
        /// <param name="description">Name of the LIFF app.  The LIFF app name can&#39;t include \&quot;LINE\&quot; or similar strings, or inappropriate strings. .</param>
        /// <param name="features">features.</param>
        /// <param name="permanentLinkPattern">How additional information in LIFF URLs is handled. Specify &#x60;concat&#x60;. .</param>
        /// <param name="scope">scope.</param>
        /// <param name="botPrompt">botPrompt.</param>
        public UpdateLiffAppRequest(LiffView view = default(LiffView), string description = default(string), LiffFeatures features = default(LiffFeatures), string permanentLinkPattern = default(string), List<LiffScope> scope = default(List<LiffScope>), LiffBotPrompt? botPrompt = default(LiffBotPrompt?))
        {
            this.View = view;
            this.Description = description;
            this.Features = features;
            this.PermanentLinkPattern = permanentLinkPattern;
            this.Scope = scope;
            this.BotPrompt = botPrompt;
        }

        /// <summary>
        /// Gets or Sets View
        /// </summary>
        [DataMember(Name = "view", EmitDefaultValue = false)]
        public LiffView View { get; set; }

        /// <summary>
        /// Name of the LIFF app.  The LIFF app name can&#39;t include \&quot;LINE\&quot; or similar strings, or inappropriate strings. 
        /// </summary>
        /// <value>Name of the LIFF app.  The LIFF app name can&#39;t include \&quot;LINE\&quot; or similar strings, or inappropriate strings. </value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public LiffFeatures Features { get; set; }

        /// <summary>
        /// How additional information in LIFF URLs is handled. Specify &#x60;concat&#x60;. 
        /// </summary>
        /// <value>How additional information in LIFF URLs is handled. Specify &#x60;concat&#x60;. </value>
        [DataMember(Name = "permanentLinkPattern", EmitDefaultValue = false)]
        public string PermanentLinkPattern { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public List<LiffScope> Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateLiffAppRequest {\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  PermanentLinkPattern: ").Append(PermanentLinkPattern).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  BotPrompt: ").Append(BotPrompt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
