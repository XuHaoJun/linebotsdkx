/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// CarouselTemplate
    /// </summary>
    [DataContract(Name = "CarouselTemplate")]
    public partial class CarouselTemplate : Template, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CarouselTemplate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CarouselTemplate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CarouselTemplate" /> class.
        /// </summary>
        /// <param name="columns">columns (required).</param>
        /// <param name="imageAspectRatio">imageAspectRatio.</param>
        /// <param name="imageSize">imageSize.</param>
        /// <param name="type">type (required) (default to &quot;CarouselTemplate&quot;).</param>
        public CarouselTemplate(List<CarouselColumn> columns = default(List<CarouselColumn>), string imageAspectRatio = default(string), string imageSize = default(string), string type = @"CarouselTemplate") : base(type)
        {
            // to ensure "columns" is required (not null)
            if (columns == null)
            {
                throw new ArgumentNullException("columns is a required property for CarouselTemplate and cannot be null");
            }
            this.Columns = columns;
            this.ImageAspectRatio = imageAspectRatio;
            this.ImageSize = imageSize;
        }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name = "columns", IsRequired = true, EmitDefaultValue = true)]
        public List<CarouselColumn> Columns { get; set; }

        /// <summary>
        /// Gets or Sets ImageAspectRatio
        /// </summary>
        [DataMember(Name = "imageAspectRatio", EmitDefaultValue = false)]
        public string ImageAspectRatio { get; set; }

        /// <summary>
        /// Gets or Sets ImageSize
        /// </summary>
        [DataMember(Name = "imageSize", EmitDefaultValue = false)]
        public string ImageSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CarouselTemplate {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  ImageAspectRatio: ").Append(ImageAspectRatio).Append("\n");
            sb.Append("  ImageSize: ").Append(ImageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
