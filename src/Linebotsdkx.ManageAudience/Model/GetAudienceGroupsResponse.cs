/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.ManageAudience.Client.OpenAPIDateConverter;

namespace Linebotsdkx.ManageAudience.Model
{
    /// <summary>
    /// Gets data for more than one audience.
    /// </summary>
    [DataContract(Name = "GetAudienceGroupsResponse")]
    public partial class GetAudienceGroupsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAudienceGroupsResponse" /> class.
        /// </summary>
        /// <param name="audienceGroups">An array of audience data. If there are no audiences that match the specified filter, an empty array will be returned..</param>
        /// <param name="hasNextPage">true when this is not the last page..</param>
        /// <param name="totalCount">The total number of audiences that can be returned with the specified filter..</param>
        /// <param name="readWriteAudienceGroupTotalCount">Of the audiences you can get with the specified filter, the number of audiences with the update permission set to READ_WRITE..</param>
        /// <param name="page">The current page number..</param>
        /// <param name="size">The maximum number of audiences on the current page..</param>
        public GetAudienceGroupsResponse(List<AudienceGroup> audienceGroups = default(List<AudienceGroup>), bool hasNextPage = default(bool), long totalCount = default(long), long readWriteAudienceGroupTotalCount = default(long), long page = default(long), long size = default(long))
        {
            this.AudienceGroups = audienceGroups;
            this.HasNextPage = hasNextPage;
            this.TotalCount = totalCount;
            this.ReadWriteAudienceGroupTotalCount = readWriteAudienceGroupTotalCount;
            this.Page = page;
            this.Size = size;
        }

        /// <summary>
        /// An array of audience data. If there are no audiences that match the specified filter, an empty array will be returned.
        /// </summary>
        /// <value>An array of audience data. If there are no audiences that match the specified filter, an empty array will be returned.</value>
        [DataMember(Name = "audienceGroups", EmitDefaultValue = false)]
        public List<AudienceGroup> AudienceGroups { get; set; }

        /// <summary>
        /// true when this is not the last page.
        /// </summary>
        /// <value>true when this is not the last page.</value>
        [DataMember(Name = "hasNextPage", EmitDefaultValue = true)]
        public bool HasNextPage { get; set; }

        /// <summary>
        /// The total number of audiences that can be returned with the specified filter.
        /// </summary>
        /// <value>The total number of audiences that can be returned with the specified filter.</value>
        [DataMember(Name = "totalCount", EmitDefaultValue = false)]
        public long TotalCount { get; set; }

        /// <summary>
        /// Of the audiences you can get with the specified filter, the number of audiences with the update permission set to READ_WRITE.
        /// </summary>
        /// <value>Of the audiences you can get with the specified filter, the number of audiences with the update permission set to READ_WRITE.</value>
        [DataMember(Name = "readWriteAudienceGroupTotalCount", EmitDefaultValue = false)]
        public long ReadWriteAudienceGroupTotalCount { get; set; }

        /// <summary>
        /// The current page number.
        /// </summary>
        /// <value>The current page number.</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public long Page { get; set; }

        /// <summary>
        /// The maximum number of audiences on the current page.
        /// </summary>
        /// <value>The maximum number of audiences on the current page.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public long Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAudienceGroupsResponse {\n");
            sb.Append("  AudienceGroups: ").Append(AudienceGroups).Append("\n");
            sb.Append("  HasNextPage: ").Append(HasNextPage).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  ReadWriteAudienceGroupTotalCount: ").Append(ReadWriteAudienceGroupTotalCount).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
