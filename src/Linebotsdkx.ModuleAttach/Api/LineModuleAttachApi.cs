/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Linebotsdkx.ModuleAttach.Client;
using Linebotsdkx.ModuleAttach.Model;

namespace Linebotsdkx.ModuleAttach.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILineModuleAttachApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Attach by operation of the module channel provider
        /// </remarks>
        /// <exception cref="Linebotsdkx.ModuleAttach.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">authorization_code</param>
        /// <param name="code">Authorization code received from the LINE Platform.</param>
        /// <param name="redirectUri">Specify the redirect_uri specified in the URL for authentication and authorization.</param>
        /// <param name="codeVerifier">Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks. (optional)</param>
        /// <param name="clientId">Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="clientSecret">Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="region">If you specified a value for region in the URL for authentication and authorization, specify the same value.  (optional)</param>
        /// <param name="basicSearchId">If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="scope">If you specified a value for scope in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="brandType">If you specified a value for brand_type in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttachModuleResponse</returns>
        AttachModuleResponse AttachModule(string grantType, string code, string redirectUri, string? codeVerifier = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), string? region = default(string?), string? basicSearchId = default(string?), string? scope = default(string?), string? brandType = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Attach by operation of the module channel provider
        /// </remarks>
        /// <exception cref="Linebotsdkx.ModuleAttach.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">authorization_code</param>
        /// <param name="code">Authorization code received from the LINE Platform.</param>
        /// <param name="redirectUri">Specify the redirect_uri specified in the URL for authentication and authorization.</param>
        /// <param name="codeVerifier">Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks. (optional)</param>
        /// <param name="clientId">Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="clientSecret">Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="region">If you specified a value for region in the URL for authentication and authorization, specify the same value.  (optional)</param>
        /// <param name="basicSearchId">If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="scope">If you specified a value for scope in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="brandType">If you specified a value for brand_type in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttachModuleResponse</returns>
        ApiResponse<AttachModuleResponse> AttachModuleWithHttpInfo(string grantType, string code, string redirectUri, string? codeVerifier = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), string? region = default(string?), string? basicSearchId = default(string?), string? scope = default(string?), string? brandType = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILineModuleAttachApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Attach by operation of the module channel provider
        /// </remarks>
        /// <exception cref="Linebotsdkx.ModuleAttach.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">authorization_code</param>
        /// <param name="code">Authorization code received from the LINE Platform.</param>
        /// <param name="redirectUri">Specify the redirect_uri specified in the URL for authentication and authorization.</param>
        /// <param name="codeVerifier">Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks. (optional)</param>
        /// <param name="clientId">Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="clientSecret">Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="region">If you specified a value for region in the URL for authentication and authorization, specify the same value.  (optional)</param>
        /// <param name="basicSearchId">If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="scope">If you specified a value for scope in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="brandType">If you specified a value for brand_type in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttachModuleResponse</returns>
        System.Threading.Tasks.Task<AttachModuleResponse> AttachModuleAsync(string grantType, string code, string redirectUri, string? codeVerifier = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), string? region = default(string?), string? basicSearchId = default(string?), string? scope = default(string?), string? brandType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Attach by operation of the module channel provider
        /// </remarks>
        /// <exception cref="Linebotsdkx.ModuleAttach.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">authorization_code</param>
        /// <param name="code">Authorization code received from the LINE Platform.</param>
        /// <param name="redirectUri">Specify the redirect_uri specified in the URL for authentication and authorization.</param>
        /// <param name="codeVerifier">Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks. (optional)</param>
        /// <param name="clientId">Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="clientSecret">Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="region">If you specified a value for region in the URL for authentication and authorization, specify the same value.  (optional)</param>
        /// <param name="basicSearchId">If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="scope">If you specified a value for scope in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="brandType">If you specified a value for brand_type in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttachModuleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachModuleResponse>> AttachModuleWithHttpInfoAsync(string grantType, string code, string redirectUri, string? codeVerifier = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), string? region = default(string?), string? basicSearchId = default(string?), string? scope = default(string?), string? brandType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILineModuleAttachApi : ILineModuleAttachApiSync, ILineModuleAttachApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LineModuleAttachApi : ILineModuleAttachApi
    {
        private Linebotsdkx.ModuleAttach.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LineModuleAttachApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LineModuleAttachApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineModuleAttachApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LineModuleAttachApi(string basePath)
        {
            this.Configuration = Linebotsdkx.ModuleAttach.Client.Configuration.MergeConfigurations(
                Linebotsdkx.ModuleAttach.Client.GlobalConfiguration.Instance,
                new Linebotsdkx.ModuleAttach.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Linebotsdkx.ModuleAttach.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.ModuleAttach.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Linebotsdkx.ModuleAttach.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineModuleAttachApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LineModuleAttachApi(Linebotsdkx.ModuleAttach.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Linebotsdkx.ModuleAttach.Client.Configuration.MergeConfigurations(
                Linebotsdkx.ModuleAttach.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Linebotsdkx.ModuleAttach.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.ModuleAttach.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Linebotsdkx.ModuleAttach.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineModuleAttachApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LineModuleAttachApi(Linebotsdkx.ModuleAttach.Client.ISynchronousClient client, Linebotsdkx.ModuleAttach.Client.IAsynchronousClient asyncClient, Linebotsdkx.ModuleAttach.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Linebotsdkx.ModuleAttach.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Linebotsdkx.ModuleAttach.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Linebotsdkx.ModuleAttach.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Linebotsdkx.ModuleAttach.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Linebotsdkx.ModuleAttach.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Attach by operation of the module channel provider
        /// </summary>
        /// <exception cref="Linebotsdkx.ModuleAttach.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">authorization_code</param>
        /// <param name="code">Authorization code received from the LINE Platform.</param>
        /// <param name="redirectUri">Specify the redirect_uri specified in the URL for authentication and authorization.</param>
        /// <param name="codeVerifier">Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks. (optional)</param>
        /// <param name="clientId">Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="clientSecret">Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="region">If you specified a value for region in the URL for authentication and authorization, specify the same value.  (optional)</param>
        /// <param name="basicSearchId">If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="scope">If you specified a value for scope in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="brandType">If you specified a value for brand_type in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttachModuleResponse</returns>
        public AttachModuleResponse AttachModule(string grantType, string code, string redirectUri, string? codeVerifier = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), string? region = default(string?), string? basicSearchId = default(string?), string? scope = default(string?), string? brandType = default(string?), int operationIndex = 0)
        {
            Linebotsdkx.ModuleAttach.Client.ApiResponse<AttachModuleResponse> localVarResponse = AttachModuleWithHttpInfo(grantType, code, redirectUri, codeVerifier, clientId, clientSecret, region, basicSearchId, scope, brandType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Attach by operation of the module channel provider
        /// </summary>
        /// <exception cref="Linebotsdkx.ModuleAttach.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">authorization_code</param>
        /// <param name="code">Authorization code received from the LINE Platform.</param>
        /// <param name="redirectUri">Specify the redirect_uri specified in the URL for authentication and authorization.</param>
        /// <param name="codeVerifier">Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks. (optional)</param>
        /// <param name="clientId">Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="clientSecret">Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="region">If you specified a value for region in the URL for authentication and authorization, specify the same value.  (optional)</param>
        /// <param name="basicSearchId">If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="scope">If you specified a value for scope in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="brandType">If you specified a value for brand_type in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttachModuleResponse</returns>
        public Linebotsdkx.ModuleAttach.Client.ApiResponse<AttachModuleResponse> AttachModuleWithHttpInfo(string grantType, string code, string redirectUri, string? codeVerifier = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), string? region = default(string?), string? basicSearchId = default(string?), string? scope = default(string?), string? brandType = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
            {
                throw new Linebotsdkx.ModuleAttach.Client.ApiException(400, "Missing required parameter 'grantType' when calling LineModuleAttachApi->AttachModule");
            }

            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Linebotsdkx.ModuleAttach.Client.ApiException(400, "Missing required parameter 'code' when calling LineModuleAttachApi->AttachModule");
            }

            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
            {
                throw new Linebotsdkx.ModuleAttach.Client.ApiException(400, "Missing required parameter 'redirectUri' when calling LineModuleAttachApi->AttachModule");
            }

            Linebotsdkx.ModuleAttach.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ModuleAttach.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ModuleAttach.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ModuleAttach.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("grant_type", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            localVarRequestOptions.FormParameters.Add("code", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(code)); // form parameter
            localVarRequestOptions.FormParameters.Add("redirect_uri", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            if (codeVerifier != null)
            {
                localVarRequestOptions.FormParameters.Add("code_verifier", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(codeVerifier)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (region != null)
            {
                localVarRequestOptions.FormParameters.Add("region", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(region)); // form parameter
            }
            if (basicSearchId != null)
            {
                localVarRequestOptions.FormParameters.Add("basic_search_id", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(basicSearchId)); // form parameter
            }
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            if (brandType != null)
            {
                localVarRequestOptions.FormParameters.Add("brand_type", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(brandType)); // form parameter
            }

            localVarRequestOptions.Operation = "LineModuleAttachApi.AttachModule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Linebotsdkx.ModuleAttach.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AttachModuleResponse>("/module/auth/v1/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachModule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Attach by operation of the module channel provider
        /// </summary>
        /// <exception cref="Linebotsdkx.ModuleAttach.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">authorization_code</param>
        /// <param name="code">Authorization code received from the LINE Platform.</param>
        /// <param name="redirectUri">Specify the redirect_uri specified in the URL for authentication and authorization.</param>
        /// <param name="codeVerifier">Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks. (optional)</param>
        /// <param name="clientId">Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="clientSecret">Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="region">If you specified a value for region in the URL for authentication and authorization, specify the same value.  (optional)</param>
        /// <param name="basicSearchId">If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="scope">If you specified a value for scope in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="brandType">If you specified a value for brand_type in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttachModuleResponse</returns>
        public async System.Threading.Tasks.Task<AttachModuleResponse> AttachModuleAsync(string grantType, string code, string redirectUri, string? codeVerifier = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), string? region = default(string?), string? basicSearchId = default(string?), string? scope = default(string?), string? brandType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.ModuleAttach.Client.ApiResponse<AttachModuleResponse> localVarResponse = await AttachModuleWithHttpInfoAsync(grantType, code, redirectUri, codeVerifier, clientId, clientSecret, region, basicSearchId, scope, brandType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Attach by operation of the module channel provider
        /// </summary>
        /// <exception cref="Linebotsdkx.ModuleAttach.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">authorization_code</param>
        /// <param name="code">Authorization code received from the LINE Platform.</param>
        /// <param name="redirectUri">Specify the redirect_uri specified in the URL for authentication and authorization.</param>
        /// <param name="codeVerifier">Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks. (optional)</param>
        /// <param name="clientId">Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="clientSecret">Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.  (optional)</param>
        /// <param name="region">If you specified a value for region in the URL for authentication and authorization, specify the same value.  (optional)</param>
        /// <param name="basicSearchId">If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="scope">If you specified a value for scope in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="brandType">If you specified a value for brand_type in the URL for authentication and authorization, specify the same value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttachModuleResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.ModuleAttach.Client.ApiResponse<AttachModuleResponse>> AttachModuleWithHttpInfoAsync(string grantType, string code, string redirectUri, string? codeVerifier = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), string? region = default(string?), string? basicSearchId = default(string?), string? scope = default(string?), string? brandType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
            {
                throw new Linebotsdkx.ModuleAttach.Client.ApiException(400, "Missing required parameter 'grantType' when calling LineModuleAttachApi->AttachModule");
            }

            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Linebotsdkx.ModuleAttach.Client.ApiException(400, "Missing required parameter 'code' when calling LineModuleAttachApi->AttachModule");
            }

            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
            {
                throw new Linebotsdkx.ModuleAttach.Client.ApiException(400, "Missing required parameter 'redirectUri' when calling LineModuleAttachApi->AttachModule");
            }


            Linebotsdkx.ModuleAttach.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.ModuleAttach.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.ModuleAttach.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.ModuleAttach.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("grant_type", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            localVarRequestOptions.FormParameters.Add("code", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(code)); // form parameter
            localVarRequestOptions.FormParameters.Add("redirect_uri", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            if (codeVerifier != null)
            {
                localVarRequestOptions.FormParameters.Add("code_verifier", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(codeVerifier)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (region != null)
            {
                localVarRequestOptions.FormParameters.Add("region", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(region)); // form parameter
            }
            if (basicSearchId != null)
            {
                localVarRequestOptions.FormParameters.Add("basic_search_id", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(basicSearchId)); // form parameter
            }
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            if (brandType != null)
            {
                localVarRequestOptions.FormParameters.Add("brand_type", Linebotsdkx.ModuleAttach.Client.ClientUtils.ParameterToString(brandType)); // form parameter
            }

            localVarRequestOptions.Operation = "LineModuleAttachApi.AttachModule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Linebotsdkx.ModuleAttach.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AttachModuleResponse>("/module/auth/v1/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachModule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
