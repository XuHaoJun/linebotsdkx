/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Linebotsdkx.ModuleAttach.Client;
using Linebotsdkx.ModuleAttach.Api;
// uncomment below to import models
//using Linebotsdkx.ModuleAttach.Model;

namespace Linebotsdkx.ModuleAttach.Test.Api
{
    /// <summary>
    ///  Class for testing LineModuleAttachApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LineModuleAttachApiTests : IDisposable
    {
        private LineModuleAttachApi instance;

        public LineModuleAttachApiTests()
        {
            instance = new LineModuleAttachApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LineModuleAttachApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' LineModuleAttachApi
            //Assert.IsType<LineModuleAttachApi>(instance);
        }

        /// <summary>
        /// Test AttachModule
        /// </summary>
        [Fact]
        public void AttachModuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string grantType = null;
            //string code = null;
            //string redirectUri = null;
            //string? codeVerifier = null;
            //string? clientId = null;
            //string? clientSecret = null;
            //string? region = null;
            //string? basicSearchId = null;
            //string? scope = null;
            //string? brandType = null;
            //var response = instance.AttachModule(grantType, code, redirectUri, codeVerifier, clientId, clientSecret, region, basicSearchId, scope, brandType);
            //Assert.IsType<AttachModuleResponse>(response);
        }
    }
}
