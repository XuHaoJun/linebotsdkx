/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Webhook.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Webhook.Model
{
    /// <summary>
    /// AttachedModuleContent
    /// </summary>
    [DataContract(Name = "AttachedModuleContent")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class AttachedModuleContent : ModuleContent, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachedModuleContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttachedModuleContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachedModuleContent" /> class.
        /// </summary>
        /// <param name="botId">User ID of the bot on the attached LINE Official Account (required).</param>
        /// <param name="scopes">An array of strings indicating the scope permitted by the admin of the LINE Official Account. (required).</param>
        /// <param name="type">Type (required) (default to &quot;AttachedModuleContent&quot;).</param>
        public AttachedModuleContent(string botId = default(string), List<string> scopes = default(List<string>), string type = @"AttachedModuleContent") : base(type)
        {
            // to ensure "botId" is required (not null)
            if (botId == null)
            {
                throw new ArgumentNullException("botId is a required property for AttachedModuleContent and cannot be null");
            }
            this.BotId = botId;
            // to ensure "scopes" is required (not null)
            if (scopes == null)
            {
                throw new ArgumentNullException("scopes is a required property for AttachedModuleContent and cannot be null");
            }
            this.Scopes = scopes;
        }

        /// <summary>
        /// User ID of the bot on the attached LINE Official Account
        /// </summary>
        /// <value>User ID of the bot on the attached LINE Official Account</value>
        [DataMember(Name = "botId", IsRequired = true, EmitDefaultValue = true)]
        public string BotId { get; set; }

        /// <summary>
        /// An array of strings indicating the scope permitted by the admin of the LINE Official Account.
        /// </summary>
        /// <value>An array of strings indicating the scope permitted by the admin of the LINE Official Account.</value>
        [DataMember(Name = "scopes", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachedModuleContent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BotId: ").Append(BotId).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
