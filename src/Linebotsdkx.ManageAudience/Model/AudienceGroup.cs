/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.ManageAudience.Client.OpenAPIDateConverter;

namespace Linebotsdkx.ManageAudience.Model
{
    /// <summary>
    /// Audience group
    /// </summary>
    [DataContract(Name = "AudienceGroup")]
    public partial class AudienceGroup : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public AudienceGroupType? Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public AudienceGroupStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets FailedType
        /// </summary>
        [DataMember(Name = "failedType", EmitDefaultValue = true)]
        public AudienceGroupFailedType? FailedType { get; set; }

        /// <summary>
        /// Gets or Sets Permission
        /// </summary>
        [DataMember(Name = "permission", EmitDefaultValue = false)]
        public AudienceGroupPermission? Permission { get; set; }

        /// <summary>
        /// Gets or Sets CreateRoute
        /// </summary>
        [DataMember(Name = "createRoute", EmitDefaultValue = false)]
        public AudienceGroupCreateRoute? CreateRoute { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceGroup" /> class.
        /// </summary>
        /// <param name="audienceGroupId">The audience ID..</param>
        /// <param name="type">type.</param>
        /// <param name="description">The audience&#39;s name..</param>
        /// <param name="status">status.</param>
        /// <param name="failedType">failedType.</param>
        /// <param name="audienceCount">The number of users included in the audience..</param>
        /// <param name="created">When the audience was created (in UNIX time)..</param>
        /// <param name="requestId">The request ID that was specified when the audience was created. This is only included when &#x60;audienceGroup.type&#x60; is CLICK or IMP. .</param>
        /// <param name="clickUrl">The URL that was specified when the audience was created. This is only included when &#x60;audienceGroup.type&#x60; is CLICK and link URL is specified. .</param>
        /// <param name="isIfaAudience">The value indicating the type of account to be sent, as specified when creating the audience for uploading user IDs. .</param>
        /// <param name="permission">permission.</param>
        /// <param name="createRoute">createRoute.</param>
        public AudienceGroup(long audienceGroupId = default(long), AudienceGroupType? type = default(AudienceGroupType?), string description = default(string), AudienceGroupStatus? status = default(AudienceGroupStatus?), AudienceGroupFailedType? failedType = default(AudienceGroupFailedType?), long audienceCount = default(long), long created = default(long), string requestId = default(string), string clickUrl = default(string), bool isIfaAudience = default(bool), AudienceGroupPermission? permission = default(AudienceGroupPermission?), AudienceGroupCreateRoute? createRoute = default(AudienceGroupCreateRoute?))
        {
            this.AudienceGroupId = audienceGroupId;
            this.Type = type;
            this.Description = description;
            this.Status = status;
            this.FailedType = failedType;
            this.AudienceCount = audienceCount;
            this.Created = created;
            this.RequestId = requestId;
            this.ClickUrl = clickUrl;
            this.IsIfaAudience = isIfaAudience;
            this.Permission = permission;
            this.CreateRoute = createRoute;
        }

        /// <summary>
        /// The audience ID.
        /// </summary>
        /// <value>The audience ID.</value>
        [DataMember(Name = "audienceGroupId", EmitDefaultValue = false)]
        public long AudienceGroupId { get; set; }

        /// <summary>
        /// The audience&#39;s name.
        /// </summary>
        /// <value>The audience&#39;s name.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The number of users included in the audience.
        /// </summary>
        /// <value>The number of users included in the audience.</value>
        [DataMember(Name = "audienceCount", EmitDefaultValue = false)]
        public long AudienceCount { get; set; }

        /// <summary>
        /// When the audience was created (in UNIX time).
        /// </summary>
        /// <value>When the audience was created (in UNIX time).</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public long Created { get; set; }

        /// <summary>
        /// The request ID that was specified when the audience was created. This is only included when &#x60;audienceGroup.type&#x60; is CLICK or IMP. 
        /// </summary>
        /// <value>The request ID that was specified when the audience was created. This is only included when &#x60;audienceGroup.type&#x60; is CLICK or IMP. </value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// The URL that was specified when the audience was created. This is only included when &#x60;audienceGroup.type&#x60; is CLICK and link URL is specified. 
        /// </summary>
        /// <value>The URL that was specified when the audience was created. This is only included when &#x60;audienceGroup.type&#x60; is CLICK and link URL is specified. </value>
        [DataMember(Name = "clickUrl", EmitDefaultValue = false)]
        public string ClickUrl { get; set; }

        /// <summary>
        /// The value indicating the type of account to be sent, as specified when creating the audience for uploading user IDs. 
        /// </summary>
        /// <value>The value indicating the type of account to be sent, as specified when creating the audience for uploading user IDs. </value>
        [DataMember(Name = "isIfaAudience", EmitDefaultValue = true)]
        public bool IsIfaAudience { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudienceGroup {\n");
            sb.Append("  AudienceGroupId: ").Append(AudienceGroupId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FailedType: ").Append(FailedType).Append("\n");
            sb.Append("  AudienceCount: ").Append(AudienceCount).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  ClickUrl: ").Append(ClickUrl).Append("\n");
            sb.Append("  IsIfaAudience: ").Append(IsIfaAudience).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("  CreateRoute: ").Append(CreateRoute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
