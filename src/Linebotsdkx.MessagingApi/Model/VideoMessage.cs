/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// VideoMessage
    /// </summary>
    [DataContract(Name = "VideoMessage")]
    public partial class VideoMessage : Message, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VideoMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoMessage" /> class.
        /// </summary>
        /// <param name="originalContentUrl">originalContentUrl (required).</param>
        /// <param name="previewImageUrl">previewImageUrl (required).</param>
        /// <param name="trackingId">trackingId.</param>
        /// <param name="type">Type of message (required) (default to &quot;VideoMessage&quot;).</param>
        /// <param name="quickReply">quickReply.</param>
        /// <param name="sender">sender.</param>
        public VideoMessage(string originalContentUrl = default(string), string previewImageUrl = default(string), string trackingId = default(string), string type = @"VideoMessage", QuickReply quickReply = default(QuickReply), Sender sender = default(Sender)) : base(type, quickReply, sender)
        {
            // to ensure "originalContentUrl" is required (not null)
            if (originalContentUrl == null)
            {
                throw new ArgumentNullException("originalContentUrl is a required property for VideoMessage and cannot be null");
            }
            this.OriginalContentUrl = originalContentUrl;
            // to ensure "previewImageUrl" is required (not null)
            if (previewImageUrl == null)
            {
                throw new ArgumentNullException("previewImageUrl is a required property for VideoMessage and cannot be null");
            }
            this.PreviewImageUrl = previewImageUrl;
            this.TrackingId = trackingId;
        }

        /// <summary>
        /// Gets or Sets OriginalContentUrl
        /// </summary>
        [DataMember(Name = "originalContentUrl", IsRequired = true, EmitDefaultValue = true)]
        public string OriginalContentUrl { get; set; }

        /// <summary>
        /// Gets or Sets PreviewImageUrl
        /// </summary>
        [DataMember(Name = "previewImageUrl", IsRequired = true, EmitDefaultValue = true)]
        public string PreviewImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets TrackingId
        /// </summary>
        [DataMember(Name = "trackingId", EmitDefaultValue = false)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VideoMessage {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  OriginalContentUrl: ").Append(OriginalContentUrl).Append("\n");
            sb.Append("  PreviewImageUrl: ").Append(PreviewImageUrl).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
