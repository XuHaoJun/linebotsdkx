/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Linebotsdkx.Module.Client;
using Linebotsdkx.Module.Api;
// uncomment below to import models
//using Linebotsdkx.Module.Model;

namespace Linebotsdkx.Module.Test.Api
{
    /// <summary>
    ///  Class for testing LineModuleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LineModuleApiTests : IDisposable
    {
        private LineModuleApi instance;

        public LineModuleApiTests()
        {
            instance = new LineModuleApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LineModuleApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' LineModuleApi
            //Assert.IsType<LineModuleApi>(instance);
        }

        /// <summary>
        /// Test AcquireChatControl
        /// </summary>
        [Fact]
        public void AcquireChatControlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //AcquireChatControlRequest? acquireChatControlRequest = null;
            //instance.AcquireChatControl(chatId, acquireChatControlRequest);
        }

        /// <summary>
        /// Test DetachModule
        /// </summary>
        [Fact]
        public void DetachModuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DetachModuleRequest? detachModuleRequest = null;
            //instance.DetachModule(detachModuleRequest);
        }

        /// <summary>
        /// Test GetModules
        /// </summary>
        [Fact]
        public void GetModulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? start = null;
            //int? limit = null;
            //var response = instance.GetModules(start, limit);
            //Assert.IsType<GetModulesResponse>(response);
        }

        /// <summary>
        /// Test ReleaseChatControl
        /// </summary>
        [Fact]
        public void ReleaseChatControlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chatId = null;
            //instance.ReleaseChatControl(chatId);
        }
    }
}
