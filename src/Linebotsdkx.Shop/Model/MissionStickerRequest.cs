/*
 * Mission Stickers API
 *
 * This document describes LINE Mission Stickers API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Shop.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Shop.Model
{
    /// <summary>
    /// Send mission stickers (v3)
    /// </summary>
    [DataContract(Name = "MissionStickerRequest")]
    public partial class MissionStickerRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MissionStickerRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MissionStickerRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MissionStickerRequest" /> class.
        /// </summary>
        /// <param name="to">Destination user ID (required).</param>
        /// <param name="productId">Package ID for a set of stickers (required).</param>
        /// <param name="productType">&#x60;STICKER&#x60; (required).</param>
        /// <param name="sendPresentMessage">&#x60;false&#x60; (required).</param>
        public MissionStickerRequest(string to = default(string), string productId = default(string), string productType = default(string), bool sendPresentMessage = default(bool))
        {
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for MissionStickerRequest and cannot be null");
            }
            this.To = to;
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new ArgumentNullException("productId is a required property for MissionStickerRequest and cannot be null");
            }
            this.ProductId = productId;
            // to ensure "productType" is required (not null)
            if (productType == null)
            {
                throw new ArgumentNullException("productType is a required property for MissionStickerRequest and cannot be null");
            }
            this.ProductType = productType;
            this.SendPresentMessage = sendPresentMessage;
        }

        /// <summary>
        /// Destination user ID
        /// </summary>
        /// <value>Destination user ID</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// Package ID for a set of stickers
        /// </summary>
        /// <value>Package ID for a set of stickers</value>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = true)]
        public string ProductId { get; set; }

        /// <summary>
        /// &#x60;STICKER&#x60;
        /// </summary>
        /// <value>&#x60;STICKER&#x60;</value>
        /// <example>STICKER</example>
        [DataMember(Name = "productType", IsRequired = true, EmitDefaultValue = true)]
        public string ProductType { get; set; }

        /// <summary>
        /// &#x60;false&#x60;
        /// </summary>
        /// <value>&#x60;false&#x60;</value>
        /// <example>false</example>
        [DataMember(Name = "sendPresentMessage", IsRequired = true, EmitDefaultValue = true)]
        public bool SendPresentMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MissionStickerRequest {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  SendPresentMessage: ").Append(SendPresentMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
