/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// AudienceMatchMessagesRequest
    /// </summary>
    [DataContract(Name = "AudienceMatchMessagesRequest")]
    public partial class AudienceMatchMessagesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceMatchMessagesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AudienceMatchMessagesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceMatchMessagesRequest" /> class.
        /// </summary>
        /// <param name="messages">Destination of the message (A value obtained by hashing the telephone number, which is another value normalized to E.164 format, with SHA256). (required).</param>
        /// <param name="to">Message to send. (required).</param>
        /// <param name="notificationDisabled">&#x60;true&#x60;: The user doesn’t receive a push notification when a message is sent. &#x60;false&#x60;: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device). The default value is false.  (default to false).</param>
        public AudienceMatchMessagesRequest(List<Message> messages = default(List<Message>), List<string> to = default(List<string>), bool notificationDisabled = false)
        {
            // to ensure "messages" is required (not null)
            if (messages == null)
            {
                throw new ArgumentNullException("messages is a required property for AudienceMatchMessagesRequest and cannot be null");
            }
            this.Messages = messages;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for AudienceMatchMessagesRequest and cannot be null");
            }
            this.To = to;
            this.NotificationDisabled = notificationDisabled;
        }

        /// <summary>
        /// Destination of the message (A value obtained by hashing the telephone number, which is another value normalized to E.164 format, with SHA256).
        /// </summary>
        /// <value>Destination of the message (A value obtained by hashing the telephone number, which is another value normalized to E.164 format, with SHA256).</value>
        [DataMember(Name = "messages", IsRequired = true, EmitDefaultValue = true)]
        public List<Message> Messages { get; set; }

        /// <summary>
        /// Message to send.
        /// </summary>
        /// <value>Message to send.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public List<string> To { get; set; }

        /// <summary>
        /// &#x60;true&#x60;: The user doesn’t receive a push notification when a message is sent. &#x60;false&#x60;: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device). The default value is false. 
        /// </summary>
        /// <value>&#x60;true&#x60;: The user doesn’t receive a push notification when a message is sent. &#x60;false&#x60;: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device). The default value is false. </value>
        [DataMember(Name = "notificationDisabled", EmitDefaultValue = true)]
        public bool NotificationDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudienceMatchMessagesRequest {\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  NotificationDisabled: ").Append(NotificationDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
