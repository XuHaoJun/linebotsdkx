/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// TextMessage
    /// </summary>
    [DataContract(Name = "TextMessage")]
    public partial class TextMessage : Message, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextMessage" /> class.
        /// </summary>
        /// <param name="text">text (required).</param>
        /// <param name="emojis">emojis.</param>
        /// <param name="quoteToken">Quote token of the message you want to quote..</param>
        /// <param name="type">Type of message (required) (default to &quot;TextMessage&quot;).</param>
        /// <param name="quickReply">quickReply.</param>
        /// <param name="sender">sender.</param>
        public TextMessage(string text = default(string), List<Emoji> emojis = default(List<Emoji>), string quoteToken = default(string), string type = @"TextMessage", QuickReply quickReply = default(QuickReply), Sender sender = default(Sender)) : base(type, quickReply, sender)
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for TextMessage and cannot be null");
            }
            this.Text = text;
            this.Emojis = emojis;
            this.QuoteToken = quoteToken;
        }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Emojis
        /// </summary>
        [DataMember(Name = "emojis", EmitDefaultValue = false)]
        public List<Emoji> Emojis { get; set; }

        /// <summary>
        /// Quote token of the message you want to quote.
        /// </summary>
        /// <value>Quote token of the message you want to quote.</value>
        [DataMember(Name = "quoteToken", EmitDefaultValue = false)]
        public string QuoteToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextMessage {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Emojis: ").Append(Emojis).Append("\n");
            sb.Append("  QuoteToken: ").Append(QuoteToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
