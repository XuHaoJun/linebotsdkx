/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// Rich menu size
    /// </summary>
    [DataContract(Name = "RichMenuSize")]
    public partial class RichMenuSize : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuSize" /> class.
        /// </summary>
        /// <param name="width">width.</param>
        /// <param name="height">height.</param>
        public RichMenuSize(long width = default(long), long height = default(long))
        {
            this.Width = width;
            this.Height = height;
        }

        /// <summary>
        /// width
        /// </summary>
        /// <value>width</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public long Width { get; set; }

        /// <summary>
        /// height
        /// </summary>
        /// <value>height</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public long Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RichMenuSize {\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Width (long) maximum
            if (this.Width > (long)2147483647)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value less than or equal to 2147483647.", new [] { "Width" });
            }

            // Width (long) minimum
            if (this.Width < (long)1)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value greater than or equal to 1.", new [] { "Width" });
            }

            // Height (long) maximum
            if (this.Height > (long)2147483647)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value less than or equal to 2147483647.", new [] { "Height" });
            }

            // Height (long) minimum
            if (this.Height < (long)1)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value greater than or equal to 1.", new [] { "Height" });
            }

            yield break;
        }
    }

}
