/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Linebotsdkx.MessagingApi.Client;
using Linebotsdkx.MessagingApi.Model;

namespace Linebotsdkx.MessagingApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiBlobApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download image, video, and audio data sent from users.
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetMessageContent(string messageId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download image, video, and audio data sent from users.
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetMessageContentWithHttpInfo(string messageId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a preview image of the image or video
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetMessageContentPreview(string messageId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a preview image of the image or video
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetMessageContentPreviewWithHttpInfo(string messageId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify the preparation status of a video or audio for getting
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMessageContentTranscodingResponse</returns>
        GetMessageContentTranscodingResponse GetMessageContentTranscodingByMessageId(string messageId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify the preparation status of a video or audio for getting
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMessageContentTranscodingResponse</returns>
        ApiResponse<GetMessageContentTranscodingResponse> GetMessageContentTranscodingByMessageIdWithHttpInfo(string messageId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download rich menu image.
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetRichMenuImage(string richMenuId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download rich menu image.
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetRichMenuImageWithHttpInfo(string richMenuId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload rich menu image
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SetRichMenuImage(string richMenuId, System.IO.Stream? body = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload rich menu image
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetRichMenuImageWithHttpInfo(string richMenuId, System.IO.Stream? body = default(System.IO.Stream?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiBlobApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download image, video, and audio data sent from users.
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetMessageContentAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download image, video, and audio data sent from users.
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMessageContentWithHttpInfoAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a preview image of the image or video
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetMessageContentPreviewAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a preview image of the image or video
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMessageContentPreviewWithHttpInfoAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify the preparation status of a video or audio for getting
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMessageContentTranscodingResponse</returns>
        System.Threading.Tasks.Task<GetMessageContentTranscodingResponse> GetMessageContentTranscodingByMessageIdAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify the preparation status of a video or audio for getting
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMessageContentTranscodingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessageContentTranscodingResponse>> GetMessageContentTranscodingByMessageIdWithHttpInfoAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download rich menu image.
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetRichMenuImageAsync(string richMenuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download rich menu image.
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRichMenuImageWithHttpInfoAsync(string richMenuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload rich menu image
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetRichMenuImageAsync(string richMenuId, System.IO.Stream? body = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload rich menu image
        /// </remarks>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetRichMenuImageWithHttpInfoAsync(string richMenuId, System.IO.Stream? body = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiBlobApi : IMessagingApiBlobApiSync, IMessagingApiBlobApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagingApiBlobApi : IMessagingApiBlobApi
    {
        private Linebotsdkx.MessagingApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagingApiBlobApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagingApiBlobApi(string basePath)
        {
            this.Configuration = Linebotsdkx.MessagingApi.Client.Configuration.MergeConfigurations(
                Linebotsdkx.MessagingApi.Client.GlobalConfiguration.Instance,
                new Linebotsdkx.MessagingApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Linebotsdkx.MessagingApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.MessagingApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Linebotsdkx.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagingApiBlobApi(Linebotsdkx.MessagingApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Linebotsdkx.MessagingApi.Client.Configuration.MergeConfigurations(
                Linebotsdkx.MessagingApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Linebotsdkx.MessagingApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.MessagingApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Linebotsdkx.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MessagingApiBlobApi(Linebotsdkx.MessagingApi.Client.ISynchronousClient client, Linebotsdkx.MessagingApi.Client.IAsynchronousClient asyncClient, Linebotsdkx.MessagingApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Linebotsdkx.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Linebotsdkx.MessagingApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Linebotsdkx.MessagingApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Linebotsdkx.MessagingApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Linebotsdkx.MessagingApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Download image, video, and audio data sent from users.
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetMessageContent(string messageId, int operationIndex = 0)
        {
            Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream> localVarResponse = GetMessageContentWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Download image, video, and audio data sent from users.
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream> GetMessageContentWithHttpInfo(string messageId, int operationIndex = 0)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Linebotsdkx.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContent");
            }

            Linebotsdkx.MessagingApi.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Linebotsdkx.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "MessagingApiBlobApi.GetMessageContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v2/bot/message/{messageId}/content", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Download image, video, and audio data sent from users.
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetMessageContentAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetMessageContentWithHttpInfoAsync(messageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Download image, video, and audio data sent from users.
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream>> GetMessageContentWithHttpInfoAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Linebotsdkx.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContent");
            }


            Linebotsdkx.MessagingApi.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Linebotsdkx.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "MessagingApiBlobApi.GetMessageContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v2/bot/message/{messageId}/content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a preview image of the image or video
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetMessageContentPreview(string messageId, int operationIndex = 0)
        {
            Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream> localVarResponse = GetMessageContentPreviewWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a preview image of the image or video
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream> GetMessageContentPreviewWithHttpInfo(string messageId, int operationIndex = 0)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Linebotsdkx.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContentPreview");
            }

            Linebotsdkx.MessagingApi.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Linebotsdkx.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "MessagingApiBlobApi.GetMessageContentPreview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v2/bot/message/{messageId}/content/preview", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContentPreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a preview image of the image or video
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetMessageContentPreviewAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetMessageContentPreviewWithHttpInfoAsync(messageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a preview image of the image or video
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream>> GetMessageContentPreviewWithHttpInfoAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Linebotsdkx.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContentPreview");
            }


            Linebotsdkx.MessagingApi.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Linebotsdkx.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "MessagingApiBlobApi.GetMessageContentPreview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v2/bot/message/{messageId}/content/preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContentPreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify the preparation status of a video or audio for getting
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMessageContentTranscodingResponse</returns>
        public GetMessageContentTranscodingResponse GetMessageContentTranscodingByMessageId(string messageId, int operationIndex = 0)
        {
            Linebotsdkx.MessagingApi.Client.ApiResponse<GetMessageContentTranscodingResponse> localVarResponse = GetMessageContentTranscodingByMessageIdWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify the preparation status of a video or audio for getting
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMessageContentTranscodingResponse</returns>
        public Linebotsdkx.MessagingApi.Client.ApiResponse<GetMessageContentTranscodingResponse> GetMessageContentTranscodingByMessageIdWithHttpInfo(string messageId, int operationIndex = 0)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Linebotsdkx.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContentTranscodingByMessageId");
            }

            Linebotsdkx.MessagingApi.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Linebotsdkx.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "MessagingApiBlobApi.GetMessageContentTranscodingByMessageId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMessageContentTranscodingResponse>("/v2/bot/message/{messageId}/content/transcoding", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContentTranscodingByMessageId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify the preparation status of a video or audio for getting
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMessageContentTranscodingResponse</returns>
        public async System.Threading.Tasks.Task<GetMessageContentTranscodingResponse> GetMessageContentTranscodingByMessageIdAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.MessagingApi.Client.ApiResponse<GetMessageContentTranscodingResponse> localVarResponse = await GetMessageContentTranscodingByMessageIdWithHttpInfoAsync(messageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify the preparation status of a video or audio for getting
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMessageContentTranscodingResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.MessagingApi.Client.ApiResponse<GetMessageContentTranscodingResponse>> GetMessageContentTranscodingByMessageIdWithHttpInfoAsync(string messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Linebotsdkx.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContentTranscodingByMessageId");
            }


            Linebotsdkx.MessagingApi.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Linebotsdkx.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "MessagingApiBlobApi.GetMessageContentTranscodingByMessageId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMessageContentTranscodingResponse>("/v2/bot/message/{messageId}/content/transcoding", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContentTranscodingByMessageId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Download rich menu image.
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetRichMenuImage(string richMenuId, int operationIndex = 0)
        {
            Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream> localVarResponse = GetRichMenuImageWithHttpInfo(richMenuId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Download rich menu image.
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream> GetRichMenuImageWithHttpInfo(string richMenuId, int operationIndex = 0)
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
            {
                throw new Linebotsdkx.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiBlobApi->GetRichMenuImage");
            }

            Linebotsdkx.MessagingApi.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("richMenuId", Linebotsdkx.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            localVarRequestOptions.Operation = "MessagingApiBlobApi.GetRichMenuImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v2/bot/richmenu/{richMenuId}/content", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Download rich menu image.
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetRichMenuImageAsync(string richMenuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetRichMenuImageWithHttpInfoAsync(richMenuId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Download rich menu image.
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.MessagingApi.Client.ApiResponse<System.IO.Stream>> GetRichMenuImageWithHttpInfoAsync(string richMenuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
            {
                throw new Linebotsdkx.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiBlobApi->GetRichMenuImage");
            }


            Linebotsdkx.MessagingApi.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("richMenuId", Linebotsdkx.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            localVarRequestOptions.Operation = "MessagingApiBlobApi.GetRichMenuImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v2/bot/richmenu/{richMenuId}/content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload rich menu image
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SetRichMenuImage(string richMenuId, System.IO.Stream? body = default(System.IO.Stream?), int operationIndex = 0)
        {
            SetRichMenuImageWithHttpInfo(richMenuId, body);
        }

        /// <summary>
        ///  Upload rich menu image
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.MessagingApi.Client.ApiResponse<Object> SetRichMenuImageWithHttpInfo(string richMenuId, System.IO.Stream? body = default(System.IO.Stream?), int operationIndex = 0)
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
            {
                throw new Linebotsdkx.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiBlobApi->SetRichMenuImage");
            }

            Linebotsdkx.MessagingApi.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("richMenuId", Linebotsdkx.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MessagingApiBlobApi.SetRichMenuImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/richmenu/{richMenuId}/content", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRichMenuImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload rich menu image
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetRichMenuImageAsync(string richMenuId, System.IO.Stream? body = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetRichMenuImageWithHttpInfoAsync(richMenuId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Upload rich menu image
        /// </summary>
        /// <exception cref="Linebotsdkx.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.MessagingApi.Client.ApiResponse<Object>> SetRichMenuImageWithHttpInfoAsync(string richMenuId, System.IO.Stream? body = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
            {
                throw new Linebotsdkx.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiBlobApi->SetRichMenuImage");
            }


            Linebotsdkx.MessagingApi.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("richMenuId", Linebotsdkx.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MessagingApiBlobApi.SetRichMenuImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/richmenu/{richMenuId}/content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRichMenuImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
