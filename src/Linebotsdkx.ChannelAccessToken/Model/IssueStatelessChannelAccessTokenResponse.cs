/*
 * Channel Access Token API
 *
 * This document describes Channel Access Token API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.ChannelAccessToken.Client.OpenAPIDateConverter;

namespace Linebotsdkx.ChannelAccessToken.Model
{
    /// <summary>
    /// Issued stateless channel access token
    /// </summary>
    [DataContract(Name = "IssueStatelessChannelAccessTokenResponse")]
    public partial class IssueStatelessChannelAccessTokenResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueStatelessChannelAccessTokenResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IssueStatelessChannelAccessTokenResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueStatelessChannelAccessTokenResponse" /> class.
        /// </summary>
        /// <param name="accessToken">A stateless channel access token. The token is an opaque string which means its format is an implementation detail and the consumer of this token should never try to use the data parsed from the token.  (required).</param>
        /// <param name="expiresIn">Duration in seconds after which the issued access token expires (required).</param>
        /// <param name="tokenType">Token type. The value is always &#x60;Bearer&#x60;. (required) (default to &quot;Bearer&quot;).</param>
        public IssueStatelessChannelAccessTokenResponse(string accessToken = default(string), int expiresIn = default(int), string tokenType = @"Bearer")
        {
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new ArgumentNullException("accessToken is a required property for IssueStatelessChannelAccessTokenResponse and cannot be null");
            }
            this.AccessToken = accessToken;
            this.ExpiresIn = expiresIn;
            // to ensure "tokenType" is required (not null)
            if (tokenType == null)
            {
                throw new ArgumentNullException("tokenType is a required property for IssueStatelessChannelAccessTokenResponse and cannot be null");
            }
            this.TokenType = tokenType;
        }

        /// <summary>
        /// A stateless channel access token. The token is an opaque string which means its format is an implementation detail and the consumer of this token should never try to use the data parsed from the token. 
        /// </summary>
        /// <value>A stateless channel access token. The token is an opaque string which means its format is an implementation detail and the consumer of this token should never try to use the data parsed from the token. </value>
        [DataMember(Name = "access_token", IsRequired = true, EmitDefaultValue = true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Duration in seconds after which the issued access token expires
        /// </summary>
        /// <value>Duration in seconds after which the issued access token expires</value>
        [DataMember(Name = "expires_in", IsRequired = true, EmitDefaultValue = true)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// Token type. The value is always &#x60;Bearer&#x60;.
        /// </summary>
        /// <value>Token type. The value is always &#x60;Bearer&#x60;.</value>
        [DataMember(Name = "token_type", IsRequired = true, EmitDefaultValue = true)]
        public string TokenType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueStatelessChannelAccessTokenResponse {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
