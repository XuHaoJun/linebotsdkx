/*
 * LINE Messaging API(Insight)
 *
 * This document describes LINE Messaging API(Insight).
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Insight.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Insight.Model
{
    /// <summary>
    /// SubscriptionPeriodTile
    /// </summary>
    [DataContract(Name = "SubscriptionPeriodTile")]
    public partial class SubscriptionPeriodTile : IValidatableObject
    {
        /// <summary>
        /// Subscription period. Possible values: &#x60;within7days&#x60;, &#x60;within90days&#x60;, &#x60;unknown&#x60; etc.
        /// </summary>
        /// <value>Subscription period. Possible values: &#x60;within7days&#x60;, &#x60;within90days&#x60;, &#x60;unknown&#x60; etc.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubscriptionPeriodEnum
        {
            /// <summary>
            /// Enum Within7days for value: within7days
            /// </summary>
            [EnumMember(Value = "within7days")]
            Within7days = 1,

            /// <summary>
            /// Enum Within30days for value: within30days
            /// </summary>
            [EnumMember(Value = "within30days")]
            Within30days = 2,

            /// <summary>
            /// Enum Within90days for value: within90days
            /// </summary>
            [EnumMember(Value = "within90days")]
            Within90days = 3,

            /// <summary>
            /// Enum Within180days for value: within180days
            /// </summary>
            [EnumMember(Value = "within180days")]
            Within180days = 4,

            /// <summary>
            /// Enum Within365days for value: within365days
            /// </summary>
            [EnumMember(Value = "within365days")]
            Within365days = 5,

            /// <summary>
            /// Enum Over365days for value: over365days
            /// </summary>
            [EnumMember(Value = "over365days")]
            Over365days = 6,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 7
        }


        /// <summary>
        /// Subscription period. Possible values: &#x60;within7days&#x60;, &#x60;within90days&#x60;, &#x60;unknown&#x60; etc.
        /// </summary>
        /// <value>Subscription period. Possible values: &#x60;within7days&#x60;, &#x60;within90days&#x60;, &#x60;unknown&#x60; etc.</value>
        [DataMember(Name = "subscriptionPeriod", EmitDefaultValue = false)]
        public SubscriptionPeriodEnum? SubscriptionPeriod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPeriodTile" /> class.
        /// </summary>
        /// <param name="subscriptionPeriod">Subscription period. Possible values: &#x60;within7days&#x60;, &#x60;within90days&#x60;, &#x60;unknown&#x60; etc..</param>
        /// <param name="percentage">Percentage. Possible values: [0.0,100.0] e.g. 0, 2.9, 37.6..</param>
        public SubscriptionPeriodTile(SubscriptionPeriodEnum? subscriptionPeriod = default(SubscriptionPeriodEnum?), double percentage = default(double))
        {
            this.SubscriptionPeriod = subscriptionPeriod;
            this.Percentage = percentage;
        }

        /// <summary>
        /// Percentage. Possible values: [0.0,100.0] e.g. 0, 2.9, 37.6.
        /// </summary>
        /// <value>Percentage. Possible values: [0.0,100.0] e.g. 0, 2.9, 37.6.</value>
        [DataMember(Name = "percentage", EmitDefaultValue = false)]
        public double Percentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionPeriodTile {\n");
            sb.Append("  SubscriptionPeriod: ").Append(SubscriptionPeriod).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
