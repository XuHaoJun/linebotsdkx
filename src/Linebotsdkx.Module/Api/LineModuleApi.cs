/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Linebotsdkx.Module.Client;
using Linebotsdkx.Module.Model;

namespace Linebotsdkx.Module.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILineModuleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="acquireChatControlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AcquireChatControl(string chatId, AcquireChatControlRequest? acquireChatControlRequest = default(AcquireChatControlRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="acquireChatControlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AcquireChatControlWithHttpInfo(string chatId, AcquireChatControlRequest? acquireChatControlRequest = default(AcquireChatControlRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachModuleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DetachModule(DetachModuleRequest? detachModuleRequest = default(DetachModuleRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachModuleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DetachModuleWithHttpInfo(DetachModuleRequest? detachModuleRequest = default(DetachModuleRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="limit">Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100  (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetModulesResponse</returns>
        GetModulesResponse GetModules(string? start = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="limit">Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100  (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetModulesResponse</returns>
        ApiResponse<GetModulesResponse> GetModulesWithHttpInfo(string? start = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ReleaseChatControl(string chatId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReleaseChatControlWithHttpInfo(string chatId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILineModuleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="acquireChatControlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AcquireChatControlAsync(string chatId, AcquireChatControlRequest? acquireChatControlRequest = default(AcquireChatControlRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="acquireChatControlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AcquireChatControlWithHttpInfoAsync(string chatId, AcquireChatControlRequest? acquireChatControlRequest = default(AcquireChatControlRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachModuleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DetachModuleAsync(DetachModuleRequest? detachModuleRequest = default(DetachModuleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachModuleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DetachModuleWithHttpInfoAsync(DetachModuleRequest? detachModuleRequest = default(DetachModuleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="limit">Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100  (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetModulesResponse</returns>
        System.Threading.Tasks.Task<GetModulesResponse> GetModulesAsync(string? start = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="limit">Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100  (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetModulesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetModulesResponse>> GetModulesWithHttpInfoAsync(string? start = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReleaseChatControlAsync(string chatId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReleaseChatControlWithHttpInfoAsync(string chatId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILineModuleApi : ILineModuleApiSync, ILineModuleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LineModuleApi : ILineModuleApi
    {
        private Linebotsdkx.Module.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LineModuleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LineModuleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineModuleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LineModuleApi(string basePath)
        {
            this.Configuration = Linebotsdkx.Module.Client.Configuration.MergeConfigurations(
                Linebotsdkx.Module.Client.GlobalConfiguration.Instance,
                new Linebotsdkx.Module.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Linebotsdkx.Module.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.Module.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Linebotsdkx.Module.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineModuleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LineModuleApi(Linebotsdkx.Module.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Linebotsdkx.Module.Client.Configuration.MergeConfigurations(
                Linebotsdkx.Module.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Linebotsdkx.Module.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.Module.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Linebotsdkx.Module.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineModuleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LineModuleApi(Linebotsdkx.Module.Client.ISynchronousClient client, Linebotsdkx.Module.Client.IAsynchronousClient asyncClient, Linebotsdkx.Module.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Linebotsdkx.Module.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Linebotsdkx.Module.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Linebotsdkx.Module.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Linebotsdkx.Module.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Linebotsdkx.Module.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="acquireChatControlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AcquireChatControl(string chatId, AcquireChatControlRequest? acquireChatControlRequest = default(AcquireChatControlRequest?), int operationIndex = 0)
        {
            AcquireChatControlWithHttpInfo(chatId, acquireChatControlRequest);
        }

        /// <summary>
        ///  If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="acquireChatControlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.Module.Client.ApiResponse<Object> AcquireChatControlWithHttpInfo(string chatId, AcquireChatControlRequest? acquireChatControlRequest = default(AcquireChatControlRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
            {
                throw new Linebotsdkx.Module.Client.ApiException(400, "Missing required parameter 'chatId' when calling LineModuleApi->AcquireChatControl");
            }

            Linebotsdkx.Module.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Module.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chatId", Linebotsdkx.Module.Client.ClientUtils.ParameterToString(chatId)); // path parameter
            localVarRequestOptions.Data = acquireChatControlRequest;

            localVarRequestOptions.Operation = "LineModuleApi.AcquireChatControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/chat/{chatId}/control/acquire", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcquireChatControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="acquireChatControlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AcquireChatControlAsync(string chatId, AcquireChatControlRequest? acquireChatControlRequest = default(AcquireChatControlRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AcquireChatControlWithHttpInfoAsync(chatId, acquireChatControlRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="acquireChatControlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Module.Client.ApiResponse<Object>> AcquireChatControlWithHttpInfoAsync(string chatId, AcquireChatControlRequest? acquireChatControlRequest = default(AcquireChatControlRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
            {
                throw new Linebotsdkx.Module.Client.ApiException(400, "Missing required parameter 'chatId' when calling LineModuleApi->AcquireChatControl");
            }


            Linebotsdkx.Module.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Module.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chatId", Linebotsdkx.Module.Client.ClientUtils.ParameterToString(chatId)); // path parameter
            localVarRequestOptions.Data = acquireChatControlRequest;

            localVarRequestOptions.Operation = "LineModuleApi.AcquireChatControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/chat/{chatId}/control/acquire", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcquireChatControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachModuleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DetachModule(DetachModuleRequest? detachModuleRequest = default(DetachModuleRequest?), int operationIndex = 0)
        {
            DetachModuleWithHttpInfo(detachModuleRequest);
        }

        /// <summary>
        ///  The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachModuleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.Module.Client.ApiResponse<Object> DetachModuleWithHttpInfo(DetachModuleRequest? detachModuleRequest = default(DetachModuleRequest?), int operationIndex = 0)
        {
            Linebotsdkx.Module.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Module.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detachModuleRequest;

            localVarRequestOptions.Operation = "LineModuleApi.DetachModule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/channel/detach", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetachModule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachModuleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DetachModuleAsync(DetachModuleRequest? detachModuleRequest = default(DetachModuleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DetachModuleWithHttpInfoAsync(detachModuleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachModuleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Module.Client.ApiResponse<Object>> DetachModuleWithHttpInfoAsync(DetachModuleRequest? detachModuleRequest = default(DetachModuleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Linebotsdkx.Module.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Module.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detachModuleRequest;

            localVarRequestOptions.Operation = "LineModuleApi.DetachModule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/channel/detach", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetachModule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="limit">Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100  (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetModulesResponse</returns>
        public GetModulesResponse GetModules(string? start = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Linebotsdkx.Module.Client.ApiResponse<GetModulesResponse> localVarResponse = GetModulesWithHttpInfo(start, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="limit">Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100  (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetModulesResponse</returns>
        public Linebotsdkx.Module.Client.ApiResponse<GetModulesResponse> GetModulesWithHttpInfo(string? start = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Linebotsdkx.Module.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Module.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Module.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Module.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "LineModuleApi.GetModules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetModulesResponse>("/v2/bot/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="limit">Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100  (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetModulesResponse</returns>
        public async System.Threading.Tasks.Task<GetModulesResponse> GetModulesAsync(string? start = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.Module.Client.ApiResponse<GetModulesResponse> localVarResponse = await GetModulesWithHttpInfoAsync(start, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="limit">Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100  (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetModulesResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Module.Client.ApiResponse<GetModulesResponse>> GetModulesWithHttpInfoAsync(string? start = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Linebotsdkx.Module.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Module.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Module.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Module.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "LineModuleApi.GetModules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetModulesResponse>("/v2/bot/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ReleaseChatControl(string chatId, int operationIndex = 0)
        {
            ReleaseChatControlWithHttpInfo(chatId);
        }

        /// <summary>
        ///  To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Linebotsdkx.Module.Client.ApiResponse<Object> ReleaseChatControlWithHttpInfo(string chatId, int operationIndex = 0)
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
            {
                throw new Linebotsdkx.Module.Client.ApiException(400, "Missing required parameter 'chatId' when calling LineModuleApi->ReleaseChatControl");
            }

            Linebotsdkx.Module.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Module.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chatId", Linebotsdkx.Module.Client.ClientUtils.ParameterToString(chatId)); // path parameter

            localVarRequestOptions.Operation = "LineModuleApi.ReleaseChatControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/chat/{chatId}/control/release", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReleaseChatControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReleaseChatControlAsync(string chatId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ReleaseChatControlWithHttpInfoAsync(chatId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Module.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId">The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Module.Client.ApiResponse<Object>> ReleaseChatControlWithHttpInfoAsync(string chatId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chatId' is set
            if (chatId == null)
            {
                throw new Linebotsdkx.Module.Client.ApiException(400, "Missing required parameter 'chatId' when calling LineModuleApi->ReleaseChatControl");
            }


            Linebotsdkx.Module.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Module.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Module.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chatId", Linebotsdkx.Module.Client.ClientUtils.ParameterToString(chatId)); // path parameter

            localVarRequestOptions.Operation = "LineModuleApi.ReleaseChatControl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/chat/{chatId}/control/release", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReleaseChatControl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
