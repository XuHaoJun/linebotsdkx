/*
 * LIFF server API
 *
 * LIFF Server API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Liff.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Liff.Model
{
    /// <summary>
    /// GetAllLiffAppsResponse
    /// </summary>
    [DataContract(Name = "GetAllLiffAppsResponse")]
    public partial class GetAllLiffAppsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAllLiffAppsResponse" /> class.
        /// </summary>
        /// <param name="apps">apps.</param>
        public GetAllLiffAppsResponse(List<LiffApp> apps = default(List<LiffApp>))
        {
            this.Apps = apps;
        }

        /// <summary>
        /// Gets or Sets Apps
        /// </summary>
        [DataMember(Name = "apps", EmitDefaultValue = false)]
        public List<LiffApp> Apps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAllLiffAppsResponse {\n");
            sb.Append("  Apps: ").Append(Apps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
