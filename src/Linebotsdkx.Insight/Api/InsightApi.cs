/*
 * LINE Messaging API(Insight)
 *
 * This document describes LINE Messaging API(Insight).
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Linebotsdkx.Insight.Client;
using Linebotsdkx.Insight.Model;

namespace Linebotsdkx.Insight.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInsightApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the demographic attributes for a LINE Official Account&#39;s friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID). 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFriendsDemographicsResponse</returns>
        GetFriendsDemographicsResponse GetFriendsDemographics(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the demographic attributes for a LINE Official Account&#39;s friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID). 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFriendsDemographicsResponse</returns>
        ApiResponse<GetFriendsDemographicsResponse> GetFriendsDemographicsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get user interaction statistics
        /// </summary>
        /// <remarks>
        /// Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMessageEventResponse</returns>
        GetMessageEventResponse GetMessageEvent(string requestId, int operationIndex = 0);

        /// <summary>
        /// Get user interaction statistics
        /// </summary>
        /// <remarks>
        /// Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMessageEventResponse</returns>
        ApiResponse<GetMessageEventResponse> GetMessageEventWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Get number of followers
        /// </summary>
        /// <remarks>
        /// Returns the number of users who have added the LINE Official Account on or before a specified date. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetNumberOfFollowersResponse</returns>
        GetNumberOfFollowersResponse GetNumberOfFollowers(string? date = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get number of followers
        /// </summary>
        /// <remarks>
        /// Returns the number of users who have added the LINE Official Account on or before a specified date. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetNumberOfFollowersResponse</returns>
        ApiResponse<GetNumberOfFollowersResponse> GetNumberOfFollowersWithHttpInfo(string? date = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get number of message deliveries
        /// </summary>
        /// <remarks>
        /// Returns the number of messages sent from LINE Official Account on a specified day. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetNumberOfMessageDeliveriesResponse</returns>
        GetNumberOfMessageDeliveriesResponse GetNumberOfMessageDeliveries(string date, int operationIndex = 0);

        /// <summary>
        /// Get number of message deliveries
        /// </summary>
        /// <remarks>
        /// Returns the number of messages sent from LINE Official Account on a specified day. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetNumberOfMessageDeliveriesResponse</returns>
        ApiResponse<GetNumberOfMessageDeliveriesResponse> GetNumberOfMessageDeliveriesWithHttpInfo(string date, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customAggregationUnit">Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. </param>
        /// <param name="from">Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="to">End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetStatisticsPerUnitResponse</returns>
        GetStatisticsPerUnitResponse GetStatisticsPerUnit(string customAggregationUnit, string from, string to, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customAggregationUnit">Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. </param>
        /// <param name="from">Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="to">End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetStatisticsPerUnitResponse</returns>
        ApiResponse<GetStatisticsPerUnitResponse> GetStatisticsPerUnitWithHttpInfo(string customAggregationUnit, string from, string to, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInsightApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the demographic attributes for a LINE Official Account&#39;s friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID). 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFriendsDemographicsResponse</returns>
        System.Threading.Tasks.Task<GetFriendsDemographicsResponse> GetFriendsDemographicsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the demographic attributes for a LINE Official Account&#39;s friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID). 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFriendsDemographicsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFriendsDemographicsResponse>> GetFriendsDemographicsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get user interaction statistics
        /// </summary>
        /// <remarks>
        /// Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMessageEventResponse</returns>
        System.Threading.Tasks.Task<GetMessageEventResponse> GetMessageEventAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get user interaction statistics
        /// </summary>
        /// <remarks>
        /// Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMessageEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessageEventResponse>> GetMessageEventWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get number of followers
        /// </summary>
        /// <remarks>
        /// Returns the number of users who have added the LINE Official Account on or before a specified date. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNumberOfFollowersResponse</returns>
        System.Threading.Tasks.Task<GetNumberOfFollowersResponse> GetNumberOfFollowersAsync(string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get number of followers
        /// </summary>
        /// <remarks>
        /// Returns the number of users who have added the LINE Official Account on or before a specified date. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNumberOfFollowersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetNumberOfFollowersResponse>> GetNumberOfFollowersWithHttpInfoAsync(string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get number of message deliveries
        /// </summary>
        /// <remarks>
        /// Returns the number of messages sent from LINE Official Account on a specified day. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNumberOfMessageDeliveriesResponse</returns>
        System.Threading.Tasks.Task<GetNumberOfMessageDeliveriesResponse> GetNumberOfMessageDeliveriesAsync(string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get number of message deliveries
        /// </summary>
        /// <remarks>
        /// Returns the number of messages sent from LINE Official Account on a specified day. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNumberOfMessageDeliveriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetNumberOfMessageDeliveriesResponse>> GetNumberOfMessageDeliveriesWithHttpInfoAsync(string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customAggregationUnit">Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. </param>
        /// <param name="from">Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="to">End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetStatisticsPerUnitResponse</returns>
        System.Threading.Tasks.Task<GetStatisticsPerUnitResponse> GetStatisticsPerUnitAsync(string customAggregationUnit, string from, string to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account. 
        /// </remarks>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customAggregationUnit">Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. </param>
        /// <param name="from">Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="to">End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetStatisticsPerUnitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStatisticsPerUnitResponse>> GetStatisticsPerUnitWithHttpInfoAsync(string customAggregationUnit, string from, string to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInsightApi : IInsightApiSync, IInsightApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InsightApi : IInsightApi
    {
        private Linebotsdkx.Insight.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InsightApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InsightApi(string basePath)
        {
            this.Configuration = Linebotsdkx.Insight.Client.Configuration.MergeConfigurations(
                Linebotsdkx.Insight.Client.GlobalConfiguration.Instance,
                new Linebotsdkx.Insight.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Linebotsdkx.Insight.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.Insight.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Linebotsdkx.Insight.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InsightApi(Linebotsdkx.Insight.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Linebotsdkx.Insight.Client.Configuration.MergeConfigurations(
                Linebotsdkx.Insight.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Linebotsdkx.Insight.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Linebotsdkx.Insight.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Linebotsdkx.Insight.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InsightApi(Linebotsdkx.Insight.Client.ISynchronousClient client, Linebotsdkx.Insight.Client.IAsynchronousClient asyncClient, Linebotsdkx.Insight.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Linebotsdkx.Insight.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Linebotsdkx.Insight.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Linebotsdkx.Insight.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Linebotsdkx.Insight.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Linebotsdkx.Insight.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieves the demographic attributes for a LINE Official Account&#39;s friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID). 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFriendsDemographicsResponse</returns>
        public GetFriendsDemographicsResponse GetFriendsDemographics(int operationIndex = 0)
        {
            Linebotsdkx.Insight.Client.ApiResponse<GetFriendsDemographicsResponse> localVarResponse = GetFriendsDemographicsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the demographic attributes for a LINE Official Account&#39;s friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID). 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFriendsDemographicsResponse</returns>
        public Linebotsdkx.Insight.Client.ApiResponse<GetFriendsDemographicsResponse> GetFriendsDemographicsWithHttpInfo(int operationIndex = 0)
        {
            Linebotsdkx.Insight.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Insight.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "InsightApi.GetFriendsDemographics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetFriendsDemographicsResponse>("/v2/bot/insight/demographic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFriendsDemographics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the demographic attributes for a LINE Official Account&#39;s friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID). 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFriendsDemographicsResponse</returns>
        public async System.Threading.Tasks.Task<GetFriendsDemographicsResponse> GetFriendsDemographicsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.Insight.Client.ApiResponse<GetFriendsDemographicsResponse> localVarResponse = await GetFriendsDemographicsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the demographic attributes for a LINE Official Account&#39;s friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID). 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFriendsDemographicsResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Insight.Client.ApiResponse<GetFriendsDemographicsResponse>> GetFriendsDemographicsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Linebotsdkx.Insight.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Insight.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "InsightApi.GetFriendsDemographics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetFriendsDemographicsResponse>("/v2/bot/insight/demographic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFriendsDemographics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user interaction statistics Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMessageEventResponse</returns>
        public GetMessageEventResponse GetMessageEvent(string requestId, int operationIndex = 0)
        {
            Linebotsdkx.Insight.Client.ApiResponse<GetMessageEventResponse> localVarResponse = GetMessageEventWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user interaction statistics Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMessageEventResponse</returns>
        public Linebotsdkx.Insight.Client.ApiResponse<GetMessageEventResponse> GetMessageEventWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new Linebotsdkx.Insight.Client.ApiException(400, "Missing required parameter 'requestId' when calling InsightApi->GetMessageEvent");
            }

            Linebotsdkx.Insight.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Insight.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "requestId", requestId));

            localVarRequestOptions.Operation = "InsightApi.GetMessageEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMessageEventResponse>("/v2/bot/insight/message/event", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user interaction statistics Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMessageEventResponse</returns>
        public async System.Threading.Tasks.Task<GetMessageEventResponse> GetMessageEventAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.Insight.Client.ApiResponse<GetMessageEventResponse> localVarResponse = await GetMessageEventWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user interaction statistics Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMessageEventResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Insight.Client.ApiResponse<GetMessageEventResponse>> GetMessageEventWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new Linebotsdkx.Insight.Client.ApiException(400, "Missing required parameter 'requestId' when calling InsightApi->GetMessageEvent");
            }


            Linebotsdkx.Insight.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Insight.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "requestId", requestId));

            localVarRequestOptions.Operation = "InsightApi.GetMessageEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMessageEventResponse>("/v2/bot/insight/message/event", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get number of followers Returns the number of users who have added the LINE Official Account on or before a specified date. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetNumberOfFollowersResponse</returns>
        public GetNumberOfFollowersResponse GetNumberOfFollowers(string? date = default(string?), int operationIndex = 0)
        {
            Linebotsdkx.Insight.Client.ApiResponse<GetNumberOfFollowersResponse> localVarResponse = GetNumberOfFollowersWithHttpInfo(date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get number of followers Returns the number of users who have added the LINE Official Account on or before a specified date. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetNumberOfFollowersResponse</returns>
        public Linebotsdkx.Insight.Client.ApiResponse<GetNumberOfFollowersResponse> GetNumberOfFollowersWithHttpInfo(string? date = default(string?), int operationIndex = 0)
        {
            Linebotsdkx.Insight.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Insight.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "InsightApi.GetNumberOfFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetNumberOfFollowersResponse>("/v2/bot/insight/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get number of followers Returns the number of users who have added the LINE Official Account on or before a specified date. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNumberOfFollowersResponse</returns>
        public async System.Threading.Tasks.Task<GetNumberOfFollowersResponse> GetNumberOfFollowersAsync(string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.Insight.Client.ApiResponse<GetNumberOfFollowersResponse> localVarResponse = await GetNumberOfFollowersWithHttpInfoAsync(date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get number of followers Returns the number of users who have added the LINE Official Account on or before a specified date. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNumberOfFollowersResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Insight.Client.ApiResponse<GetNumberOfFollowersResponse>> GetNumberOfFollowersWithHttpInfoAsync(string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Linebotsdkx.Insight.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Insight.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "InsightApi.GetNumberOfFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetNumberOfFollowersResponse>("/v2/bot/insight/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get number of message deliveries Returns the number of messages sent from LINE Official Account on a specified day. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetNumberOfMessageDeliveriesResponse</returns>
        public GetNumberOfMessageDeliveriesResponse GetNumberOfMessageDeliveries(string date, int operationIndex = 0)
        {
            Linebotsdkx.Insight.Client.ApiResponse<GetNumberOfMessageDeliveriesResponse> localVarResponse = GetNumberOfMessageDeliveriesWithHttpInfo(date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get number of message deliveries Returns the number of messages sent from LINE Official Account on a specified day. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetNumberOfMessageDeliveriesResponse</returns>
        public Linebotsdkx.Insight.Client.ApiResponse<GetNumberOfMessageDeliveriesResponse> GetNumberOfMessageDeliveriesWithHttpInfo(string date, int operationIndex = 0)
        {
            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new Linebotsdkx.Insight.Client.ApiException(400, "Missing required parameter 'date' when calling InsightApi->GetNumberOfMessageDeliveries");
            }

            Linebotsdkx.Insight.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Insight.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            localVarRequestOptions.Operation = "InsightApi.GetNumberOfMessageDeliveries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetNumberOfMessageDeliveriesResponse>("/v2/bot/insight/message/delivery", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfMessageDeliveries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get number of message deliveries Returns the number of messages sent from LINE Official Account on a specified day. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNumberOfMessageDeliveriesResponse</returns>
        public async System.Threading.Tasks.Task<GetNumberOfMessageDeliveriesResponse> GetNumberOfMessageDeliveriesAsync(string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.Insight.Client.ApiResponse<GetNumberOfMessageDeliveriesResponse> localVarResponse = await GetNumberOfMessageDeliveriesWithHttpInfoAsync(date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get number of message deliveries Returns the number of messages sent from LINE Official Account on a specified day. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNumberOfMessageDeliveriesResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Insight.Client.ApiResponse<GetNumberOfMessageDeliveriesResponse>> GetNumberOfMessageDeliveriesWithHttpInfoAsync(string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new Linebotsdkx.Insight.Client.ApiException(400, "Missing required parameter 'date' when calling InsightApi->GetNumberOfMessageDeliveries");
            }


            Linebotsdkx.Insight.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Insight.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            localVarRequestOptions.Operation = "InsightApi.GetNumberOfMessageDeliveries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetNumberOfMessageDeliveriesResponse>("/v2/bot/insight/message/delivery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfMessageDeliveries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customAggregationUnit">Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. </param>
        /// <param name="from">Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="to">End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetStatisticsPerUnitResponse</returns>
        public GetStatisticsPerUnitResponse GetStatisticsPerUnit(string customAggregationUnit, string from, string to, int operationIndex = 0)
        {
            Linebotsdkx.Insight.Client.ApiResponse<GetStatisticsPerUnitResponse> localVarResponse = GetStatisticsPerUnitWithHttpInfo(customAggregationUnit, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customAggregationUnit">Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. </param>
        /// <param name="from">Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="to">End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetStatisticsPerUnitResponse</returns>
        public Linebotsdkx.Insight.Client.ApiResponse<GetStatisticsPerUnitResponse> GetStatisticsPerUnitWithHttpInfo(string customAggregationUnit, string from, string to, int operationIndex = 0)
        {
            // verify the required parameter 'customAggregationUnit' is set
            if (customAggregationUnit == null)
            {
                throw new Linebotsdkx.Insight.Client.ApiException(400, "Missing required parameter 'customAggregationUnit' when calling InsightApi->GetStatisticsPerUnit");
            }

            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new Linebotsdkx.Insight.Client.ApiException(400, "Missing required parameter 'from' when calling InsightApi->GetStatisticsPerUnit");
            }

            // verify the required parameter 'to' is set
            if (to == null)
            {
                throw new Linebotsdkx.Insight.Client.ApiException(400, "Missing required parameter 'to' when calling InsightApi->GetStatisticsPerUnit");
            }

            Linebotsdkx.Insight.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Insight.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "customAggregationUnit", customAggregationUnit));
            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "to", to));

            localVarRequestOptions.Operation = "InsightApi.GetStatisticsPerUnit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetStatisticsPerUnitResponse>("/v2/bot/insight/message/event/aggregation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatisticsPerUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customAggregationUnit">Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. </param>
        /// <param name="from">Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="to">End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetStatisticsPerUnitResponse</returns>
        public async System.Threading.Tasks.Task<GetStatisticsPerUnitResponse> GetStatisticsPerUnitAsync(string customAggregationUnit, string from, string to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Linebotsdkx.Insight.Client.ApiResponse<GetStatisticsPerUnitResponse> localVarResponse = await GetStatisticsPerUnitWithHttpInfoAsync(customAggregationUnit, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account. 
        /// </summary>
        /// <exception cref="Linebotsdkx.Insight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customAggregationUnit">Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. </param>
        /// <param name="from">Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="to">End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetStatisticsPerUnitResponse)</returns>
        public async System.Threading.Tasks.Task<Linebotsdkx.Insight.Client.ApiResponse<GetStatisticsPerUnitResponse>> GetStatisticsPerUnitWithHttpInfoAsync(string customAggregationUnit, string from, string to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customAggregationUnit' is set
            if (customAggregationUnit == null)
            {
                throw new Linebotsdkx.Insight.Client.ApiException(400, "Missing required parameter 'customAggregationUnit' when calling InsightApi->GetStatisticsPerUnit");
            }

            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new Linebotsdkx.Insight.Client.ApiException(400, "Missing required parameter 'from' when calling InsightApi->GetStatisticsPerUnit");
            }

            // verify the required parameter 'to' is set
            if (to == null)
            {
                throw new Linebotsdkx.Insight.Client.ApiException(400, "Missing required parameter 'to' when calling InsightApi->GetStatisticsPerUnit");
            }


            Linebotsdkx.Insight.Client.RequestOptions localVarRequestOptions = new Linebotsdkx.Insight.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Linebotsdkx.Insight.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "customAggregationUnit", customAggregationUnit));
            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(Linebotsdkx.Insight.Client.ClientUtils.ParameterToMultiMap("", "to", to));

            localVarRequestOptions.Operation = "InsightApi.GetStatisticsPerUnit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetStatisticsPerUnitResponse>("/v2/bot/insight/message/event/aggregation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatisticsPerUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
