/*
 * Channel Access Token API
 *
 * This document describes Channel Access Token API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.ChannelAccessToken.Client.OpenAPIDateConverter;

namespace Linebotsdkx.ChannelAccessToken.Model
{
    /// <summary>
    /// Verification result
    /// </summary>
    [DataContract(Name = "VerifyChannelAccessTokenResponse")]
    public partial class VerifyChannelAccessTokenResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyChannelAccessTokenResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VerifyChannelAccessTokenResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyChannelAccessTokenResponse" /> class.
        /// </summary>
        /// <param name="clientId">The channel ID for which the channel access token was issued. (required).</param>
        /// <param name="expiresIn">Number of seconds before the channel access token expires. (required).</param>
        /// <param name="scope">Permissions granted to the channel access token..</param>
        public VerifyChannelAccessTokenResponse(string clientId = default(string), long expiresIn = default(long), string scope = default(string))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new ArgumentNullException("clientId is a required property for VerifyChannelAccessTokenResponse and cannot be null");
            }
            this.ClientId = clientId;
            this.ExpiresIn = expiresIn;
            this.Scope = scope;
        }

        /// <summary>
        /// The channel ID for which the channel access token was issued.
        /// </summary>
        /// <value>The channel ID for which the channel access token was issued.</value>
        [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Number of seconds before the channel access token expires.
        /// </summary>
        /// <value>Number of seconds before the channel access token expires.</value>
        [DataMember(Name = "expires_in", IsRequired = true, EmitDefaultValue = true)]
        public long ExpiresIn { get; set; }

        /// <summary>
        /// Permissions granted to the channel access token.
        /// </summary>
        /// <value>Permissions granted to the channel access token.</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyChannelAccessTokenResponse {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
