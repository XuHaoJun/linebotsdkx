/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.ManageAudience.Client.OpenAPIDateConverter;

namespace Linebotsdkx.ManageAudience.Model
{
    /// <summary>
    /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
    /// </summary>
    [DataContract(Name = "AddAudienceToAudienceGroupRequest")]
    public partial class AddAudienceToAudienceGroupRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddAudienceToAudienceGroupRequest" /> class.
        /// </summary>
        /// <param name="audienceGroupId">The audience ID..</param>
        /// <param name="uploadDescription">The audience&#39;s name..</param>
        /// <param name="audiences">An array of up to 10,000 user IDs or IFAs..</param>
        public AddAudienceToAudienceGroupRequest(long audienceGroupId = default(long), string uploadDescription = default(string), List<Audience> audiences = default(List<Audience>))
        {
            this.AudienceGroupId = audienceGroupId;
            this.UploadDescription = uploadDescription;
            this.Audiences = audiences;
        }

        /// <summary>
        /// The audience ID.
        /// </summary>
        /// <value>The audience ID.</value>
        [DataMember(Name = "audienceGroupId", EmitDefaultValue = false)]
        public long AudienceGroupId { get; set; }

        /// <summary>
        /// The audience&#39;s name.
        /// </summary>
        /// <value>The audience&#39;s name.</value>
        [DataMember(Name = "uploadDescription", EmitDefaultValue = false)]
        public string UploadDescription { get; set; }

        /// <summary>
        /// An array of up to 10,000 user IDs or IFAs.
        /// </summary>
        /// <value>An array of up to 10,000 user IDs or IFAs.</value>
        [DataMember(Name = "audiences", EmitDefaultValue = false)]
        public List<Audience> Audiences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddAudienceToAudienceGroupRequest {\n");
            sb.Append("  AudienceGroupId: ").Append(AudienceGroupId).Append("\n");
            sb.Append("  UploadDescription: ").Append(UploadDescription).Append("\n");
            sb.Append("  Audiences: ").Append(Audiences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
