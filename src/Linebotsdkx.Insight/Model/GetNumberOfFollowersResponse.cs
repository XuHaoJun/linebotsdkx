/*
 * LINE Messaging API(Insight)
 *
 * This document describes LINE Messaging API(Insight).
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.Insight.Client.OpenAPIDateConverter;

namespace Linebotsdkx.Insight.Model
{
    /// <summary>
    /// Get number of followers
    /// </summary>
    [DataContract(Name = "GetNumberOfFollowersResponse")]
    public partial class GetNumberOfFollowersResponse : IValidatableObject
    {
        /// <summary>
        /// Calculation status.
        /// </summary>
        /// <value>Calculation status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Ready for value: ready
            /// </summary>
            [EnumMember(Value = "ready")]
            Ready = 1,

            /// <summary>
            /// Enum Unready for value: unready
            /// </summary>
            [EnumMember(Value = "unready")]
            Unready = 2,

            /// <summary>
            /// Enum OutOfService for value: out_of_service
            /// </summary>
            [EnumMember(Value = "out_of_service")]
            OutOfService = 3
        }


        /// <summary>
        /// Calculation status.
        /// </summary>
        /// <value>Calculation status.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetNumberOfFollowersResponse" /> class.
        /// </summary>
        /// <param name="status">Calculation status..</param>
        /// <param name="followers">The number of times, as of the specified date, that a user added this LINE Official Account as a friend for the first time. The number doesn&#39;t decrease even if a user later blocks the account or when they delete their LINE account. .</param>
        /// <param name="targetedReaches">The number of users, as of the specified date, that the LINE Official Account can reach through targeted messages based on gender, age, and/or region. This number only includes users who are active on LINE or LINE services and whose demographics have a high level of certainty. .</param>
        /// <param name="blocks">The number of users blocking the account as of the specified date. The number decreases when a user unblocks the account.   .</param>
        public GetNumberOfFollowersResponse(StatusEnum? status = default(StatusEnum?), long followers = default(long), long targetedReaches = default(long), long blocks = default(long))
        {
            this.Status = status;
            this.Followers = followers;
            this.TargetedReaches = targetedReaches;
            this.Blocks = blocks;
        }

        /// <summary>
        /// The number of times, as of the specified date, that a user added this LINE Official Account as a friend for the first time. The number doesn&#39;t decrease even if a user later blocks the account or when they delete their LINE account. 
        /// </summary>
        /// <value>The number of times, as of the specified date, that a user added this LINE Official Account as a friend for the first time. The number doesn&#39;t decrease even if a user later blocks the account or when they delete their LINE account. </value>
        [DataMember(Name = "followers", EmitDefaultValue = false)]
        public long Followers { get; set; }

        /// <summary>
        /// The number of users, as of the specified date, that the LINE Official Account can reach through targeted messages based on gender, age, and/or region. This number only includes users who are active on LINE or LINE services and whose demographics have a high level of certainty. 
        /// </summary>
        /// <value>The number of users, as of the specified date, that the LINE Official Account can reach through targeted messages based on gender, age, and/or region. This number only includes users who are active on LINE or LINE services and whose demographics have a high level of certainty. </value>
        [DataMember(Name = "targetedReaches", EmitDefaultValue = false)]
        public long TargetedReaches { get; set; }

        /// <summary>
        /// The number of users blocking the account as of the specified date. The number decreases when a user unblocks the account.   
        /// </summary>
        /// <value>The number of users blocking the account as of the specified date. The number decreases when a user unblocks the account.   </value>
        [DataMember(Name = "blocks", EmitDefaultValue = false)]
        public long Blocks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetNumberOfFollowersResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Followers: ").Append(Followers).Append("\n");
            sb.Append("  TargetedReaches: ").Append(TargetedReaches).Append("\n");
            sb.Append("  Blocks: ").Append(Blocks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
