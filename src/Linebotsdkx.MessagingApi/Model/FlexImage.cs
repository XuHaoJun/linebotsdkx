/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// FlexImage
    /// </summary>
    [DataContract(Name = "FlexImage")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class FlexImage : FlexComponent, IValidatableObject
    {
        /// <summary>
        /// Reference for offsetTop, offsetBottom, offsetStart, and offsetEnd. Specify one of the following values:  &#x60;relative&#x60;: Use the previous box as reference. &#x60;absolute&#x60;: Use the top left of parent element as reference. The default value is relative. 
        /// </summary>
        /// <value>Reference for offsetTop, offsetBottom, offsetStart, and offsetEnd. Specify one of the following values:  &#x60;relative&#x60;: Use the previous box as reference. &#x60;absolute&#x60;: Use the top left of parent element as reference. The default value is relative. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PositionEnum
        {
            /// <summary>
            /// Enum Relative for value: relative
            /// </summary>
            [EnumMember(Value = "relative")]
            Relative = 1,

            /// <summary>
            /// Enum Absolute for value: absolute
            /// </summary>
            [EnumMember(Value = "absolute")]
            Absolute = 2
        }


        /// <summary>
        /// Reference for offsetTop, offsetBottom, offsetStart, and offsetEnd. Specify one of the following values:  &#x60;relative&#x60;: Use the previous box as reference. &#x60;absolute&#x60;: Use the top left of parent element as reference. The default value is relative. 
        /// </summary>
        /// <value>Reference for offsetTop, offsetBottom, offsetStart, and offsetEnd. Specify one of the following values:  &#x60;relative&#x60;: Use the previous box as reference. &#x60;absolute&#x60;: Use the top left of parent element as reference. The default value is relative. </value>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public PositionEnum? Position { get; set; }
        /// <summary>
        /// Alignment style in horizontal direction. 
        /// </summary>
        /// <value>Alignment style in horizontal direction. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlignEnum
        {
            /// <summary>
            /// Enum Start for value: start
            /// </summary>
            [EnumMember(Value = "start")]
            Start = 1,

            /// <summary>
            /// Enum End for value: end
            /// </summary>
            [EnumMember(Value = "end")]
            End = 2,

            /// <summary>
            /// Enum Center for value: center
            /// </summary>
            [EnumMember(Value = "center")]
            Center = 3
        }


        /// <summary>
        /// Alignment style in horizontal direction. 
        /// </summary>
        /// <value>Alignment style in horizontal direction. </value>
        [DataMember(Name = "align", EmitDefaultValue = false)]
        public AlignEnum? Align { get; set; }
        /// <summary>
        /// Alignment style in vertical direction.
        /// </summary>
        /// <value>Alignment style in vertical direction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GravityEnum
        {
            /// <summary>
            /// Enum Top for value: top
            /// </summary>
            [EnumMember(Value = "top")]
            Top = 1,

            /// <summary>
            /// Enum Bottom for value: bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            Bottom = 2,

            /// <summary>
            /// Enum Center for value: center
            /// </summary>
            [EnumMember(Value = "center")]
            Center = 3
        }


        /// <summary>
        /// Alignment style in vertical direction.
        /// </summary>
        /// <value>Alignment style in vertical direction.</value>
        [DataMember(Name = "gravity", EmitDefaultValue = false)]
        public GravityEnum? Gravity { get; set; }
        /// <summary>
        /// The display style of the image if the aspect ratio of the image and that specified by the aspectRatio property do not match. 
        /// </summary>
        /// <value>The display style of the image if the aspect ratio of the image and that specified by the aspectRatio property do not match. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AspectModeEnum
        {
            /// <summary>
            /// Enum Fit for value: fit
            /// </summary>
            [EnumMember(Value = "fit")]
            Fit = 1,

            /// <summary>
            /// Enum Cover for value: cover
            /// </summary>
            [EnumMember(Value = "cover")]
            Cover = 2
        }


        /// <summary>
        /// The display style of the image if the aspect ratio of the image and that specified by the aspectRatio property do not match. 
        /// </summary>
        /// <value>The display style of the image if the aspect ratio of the image and that specified by the aspectRatio property do not match. </value>
        [DataMember(Name = "aspectMode", EmitDefaultValue = false)]
        public AspectModeEnum? AspectMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexImage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlexImage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexImage" /> class.
        /// </summary>
        /// <param name="url">Image URL (Max character limit: 2000) Protocol: HTTPS (TLS 1.2 or later) Image format: JPEG or PNG Maximum image size: 1024Ã—1024 pixels Maximum file size: 10 MB (300 KB when the animated property is true)  (required).</param>
        /// <param name="flex">The ratio of the width or height of this component within the parent box..</param>
        /// <param name="margin">The minimum amount of space to include before this component in its parent container. .</param>
        /// <param name="position">Reference for offsetTop, offsetBottom, offsetStart, and offsetEnd. Specify one of the following values:  &#x60;relative&#x60;: Use the previous box as reference. &#x60;absolute&#x60;: Use the top left of parent element as reference. The default value is relative. .</param>
        /// <param name="offsetTop">Offset..</param>
        /// <param name="offsetBottom">Offset..</param>
        /// <param name="offsetStart">Offset..</param>
        /// <param name="offsetEnd">Offset..</param>
        /// <param name="align">Alignment style in horizontal direction. .</param>
        /// <param name="gravity">Alignment style in vertical direction..</param>
        /// <param name="size">The maximum image width. This is md by default.  (default to &quot;md&quot;).</param>
        /// <param name="aspectRatio">Aspect ratio of the image. &#x60;{width}:{height}&#x60; format. Specify the value of &#x60;{width}&#x60; and &#x60;{height}&#x60; in the range from &#x60;1&#x60; to &#x60;100000&#x60;. However, you cannot set &#x60;{height}&#x60; to a value that is more than three times the value of &#x60;{width}&#x60;. The default value is &#x60;1:1&#x60;. .</param>
        /// <param name="aspectMode">The display style of the image if the aspect ratio of the image and that specified by the aspectRatio property do not match. .</param>
        /// <param name="backgroundColor">Background color of the image. Use a hexadecimal color code..</param>
        /// <param name="action">action.</param>
        /// <param name="animated">When this is &#x60;true&#x60;, an animated image (APNG) plays. You can specify a value of true up to 10 images in a single message. You can&#39;t send messages that exceed this limit. This is &#x60;false&#x60; by default. Animated images larger than 300 KB aren&#39;t played back.  (default to false).</param>
        /// <param name="type">type (required) (default to &quot;FlexImage&quot;).</param>
        public FlexImage(string url = default(string), int flex = default(int), string margin = default(string), PositionEnum? position = default(PositionEnum?), string offsetTop = default(string), string offsetBottom = default(string), string offsetStart = default(string), string offsetEnd = default(string), AlignEnum? align = default(AlignEnum?), GravityEnum? gravity = default(GravityEnum?), string size = @"md", string aspectRatio = default(string), AspectModeEnum? aspectMode = default(AspectModeEnum?), string backgroundColor = default(string), Action action = default(Action), bool animated = false, string type = @"FlexImage") : base(type)
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for FlexImage and cannot be null");
            }
            this.Url = url;
            this.Flex = flex;
            this.Margin = margin;
            this.Position = position;
            this.OffsetTop = offsetTop;
            this.OffsetBottom = offsetBottom;
            this.OffsetStart = offsetStart;
            this.OffsetEnd = offsetEnd;
            this.Align = align;
            this.Gravity = gravity;
            // use default value if no "size" provided
            this.Size = size ?? @"md";
            this.AspectRatio = aspectRatio;
            this.AspectMode = aspectMode;
            this.BackgroundColor = backgroundColor;
            this.Action = action;
            this.Animated = animated;
        }

        /// <summary>
        /// Image URL (Max character limit: 2000) Protocol: HTTPS (TLS 1.2 or later) Image format: JPEG or PNG Maximum image size: 1024Ã—1024 pixels Maximum file size: 10 MB (300 KB when the animated property is true) 
        /// </summary>
        /// <value>Image URL (Max character limit: 2000) Protocol: HTTPS (TLS 1.2 or later) Image format: JPEG or PNG Maximum image size: 1024Ã—1024 pixels Maximum file size: 10 MB (300 KB when the animated property is true) </value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// The ratio of the width or height of this component within the parent box.
        /// </summary>
        /// <value>The ratio of the width or height of this component within the parent box.</value>
        [DataMember(Name = "flex", EmitDefaultValue = false)]
        public int Flex { get; set; }

        /// <summary>
        /// The minimum amount of space to include before this component in its parent container. 
        /// </summary>
        /// <value>The minimum amount of space to include before this component in its parent container. </value>
        [DataMember(Name = "margin", EmitDefaultValue = false)]
        public string Margin { get; set; }

        /// <summary>
        /// Offset.
        /// </summary>
        /// <value>Offset.</value>
        [DataMember(Name = "offsetTop", EmitDefaultValue = false)]
        public string OffsetTop { get; set; }

        /// <summary>
        /// Offset.
        /// </summary>
        /// <value>Offset.</value>
        [DataMember(Name = "offsetBottom", EmitDefaultValue = false)]
        public string OffsetBottom { get; set; }

        /// <summary>
        /// Offset.
        /// </summary>
        /// <value>Offset.</value>
        [DataMember(Name = "offsetStart", EmitDefaultValue = false)]
        public string OffsetStart { get; set; }

        /// <summary>
        /// Offset.
        /// </summary>
        /// <value>Offset.</value>
        [DataMember(Name = "offsetEnd", EmitDefaultValue = false)]
        public string OffsetEnd { get; set; }

        /// <summary>
        /// The maximum image width. This is md by default. 
        /// </summary>
        /// <value>The maximum image width. This is md by default. </value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        /// Aspect ratio of the image. &#x60;{width}:{height}&#x60; format. Specify the value of &#x60;{width}&#x60; and &#x60;{height}&#x60; in the range from &#x60;1&#x60; to &#x60;100000&#x60;. However, you cannot set &#x60;{height}&#x60; to a value that is more than three times the value of &#x60;{width}&#x60;. The default value is &#x60;1:1&#x60;. 
        /// </summary>
        /// <value>Aspect ratio of the image. &#x60;{width}:{height}&#x60; format. Specify the value of &#x60;{width}&#x60; and &#x60;{height}&#x60; in the range from &#x60;1&#x60; to &#x60;100000&#x60;. However, you cannot set &#x60;{height}&#x60; to a value that is more than three times the value of &#x60;{width}&#x60;. The default value is &#x60;1:1&#x60;. </value>
        [DataMember(Name = "aspectRatio", EmitDefaultValue = false)]
        public string AspectRatio { get; set; }

        /// <summary>
        /// Background color of the image. Use a hexadecimal color code.
        /// </summary>
        /// <value>Background color of the image. Use a hexadecimal color code.</value>
        [DataMember(Name = "backgroundColor", EmitDefaultValue = false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public Action Action { get; set; }

        /// <summary>
        /// When this is &#x60;true&#x60;, an animated image (APNG) plays. You can specify a value of true up to 10 images in a single message. You can&#39;t send messages that exceed this limit. This is &#x60;false&#x60; by default. Animated images larger than 300 KB aren&#39;t played back. 
        /// </summary>
        /// <value>When this is &#x60;true&#x60;, an animated image (APNG) plays. You can specify a value of true up to 10 images in a single message. You can&#39;t send messages that exceed this limit. This is &#x60;false&#x60; by default. Animated images larger than 300 KB aren&#39;t played back. </value>
        [DataMember(Name = "animated", EmitDefaultValue = true)]
        public bool Animated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlexImage {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Flex: ").Append(Flex).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  OffsetTop: ").Append(OffsetTop).Append("\n");
            sb.Append("  OffsetBottom: ").Append(OffsetBottom).Append("\n");
            sb.Append("  OffsetStart: ").Append(OffsetStart).Append("\n");
            sb.Append("  OffsetEnd: ").Append(OffsetEnd).Append("\n");
            sb.Append("  Align: ").Append(Align).Append("\n");
            sb.Append("  Gravity: ").Append(Gravity).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  AspectMode: ").Append(AspectMode).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Animated: ").Append(Animated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
