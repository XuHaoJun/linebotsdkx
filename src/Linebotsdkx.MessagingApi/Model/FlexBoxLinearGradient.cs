/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// FlexBoxLinearGradient
    /// </summary>
    [DataContract(Name = "FlexBoxLinearGradient")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class FlexBoxLinearGradient : FlexBoxBackground, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexBoxLinearGradient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlexBoxLinearGradient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexBoxLinearGradient" /> class.
        /// </summary>
        /// <param name="angle">angle.</param>
        /// <param name="startColor">startColor.</param>
        /// <param name="endColor">endColor.</param>
        /// <param name="centerColor">centerColor.</param>
        /// <param name="centerPosition">centerPosition.</param>
        /// <param name="type">type (required) (default to &quot;FlexBoxLinearGradient&quot;).</param>
        public FlexBoxLinearGradient(string angle = default(string), string startColor = default(string), string endColor = default(string), string centerColor = default(string), string centerPosition = default(string), string type = @"FlexBoxLinearGradient") : base(type)
        {
            this.Angle = angle;
            this.StartColor = startColor;
            this.EndColor = endColor;
            this.CenterColor = centerColor;
            this.CenterPosition = centerPosition;
        }

        /// <summary>
        /// Gets or Sets Angle
        /// </summary>
        [DataMember(Name = "angle", EmitDefaultValue = false)]
        public string Angle { get; set; }

        /// <summary>
        /// Gets or Sets StartColor
        /// </summary>
        [DataMember(Name = "startColor", EmitDefaultValue = false)]
        public string StartColor { get; set; }

        /// <summary>
        /// Gets or Sets EndColor
        /// </summary>
        [DataMember(Name = "endColor", EmitDefaultValue = false)]
        public string EndColor { get; set; }

        /// <summary>
        /// Gets or Sets CenterColor
        /// </summary>
        [DataMember(Name = "centerColor", EmitDefaultValue = false)]
        public string CenterColor { get; set; }

        /// <summary>
        /// Gets or Sets CenterPosition
        /// </summary>
        [DataMember(Name = "centerPosition", EmitDefaultValue = false)]
        public string CenterPosition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlexBoxLinearGradient {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  StartColor: ").Append(StartColor).Append("\n");
            sb.Append("  EndColor: ").Append(EndColor).Append("\n");
            sb.Append("  CenterColor: ").Append(CenterColor).Append("\n");
            sb.Append("  CenterPosition: ").Append(CenterPosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
