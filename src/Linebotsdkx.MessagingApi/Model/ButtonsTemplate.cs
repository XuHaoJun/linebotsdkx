/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Linebotsdkx.MessagingApi.Client.OpenAPIDateConverter;

namespace Linebotsdkx.MessagingApi.Model
{
    /// <summary>
    /// ButtonsTemplate
    /// </summary>
    [DataContract(Name = "ButtonsTemplate")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class ButtonsTemplate : Template, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ButtonsTemplate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ButtonsTemplate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ButtonsTemplate" /> class.
        /// </summary>
        /// <param name="thumbnailImageUrl">thumbnailImageUrl.</param>
        /// <param name="imageAspectRatio">imageAspectRatio.</param>
        /// <param name="imageSize">imageSize.</param>
        /// <param name="imageBackgroundColor">imageBackgroundColor.</param>
        /// <param name="title">title.</param>
        /// <param name="text">text (required).</param>
        /// <param name="defaultAction">defaultAction.</param>
        /// <param name="actions">actions (required).</param>
        /// <param name="type">type (required) (default to &quot;ButtonsTemplate&quot;).</param>
        public ButtonsTemplate(string thumbnailImageUrl = default(string), string imageAspectRatio = default(string), string imageSize = default(string), string imageBackgroundColor = default(string), string title = default(string), string text = default(string), Action defaultAction = default(Action), List<Action> actions = default(List<Action>), string type = @"ButtonsTemplate") : base(type)
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for ButtonsTemplate and cannot be null");
            }
            this.Text = text;
            // to ensure "actions" is required (not null)
            if (actions == null)
            {
                throw new ArgumentNullException("actions is a required property for ButtonsTemplate and cannot be null");
            }
            this.Actions = actions;
            this.ThumbnailImageUrl = thumbnailImageUrl;
            this.ImageAspectRatio = imageAspectRatio;
            this.ImageSize = imageSize;
            this.ImageBackgroundColor = imageBackgroundColor;
            this.Title = title;
            this.DefaultAction = defaultAction;
        }

        /// <summary>
        /// Gets or Sets ThumbnailImageUrl
        /// </summary>
        [DataMember(Name = "thumbnailImageUrl", EmitDefaultValue = false)]
        public string ThumbnailImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ImageAspectRatio
        /// </summary>
        [DataMember(Name = "imageAspectRatio", EmitDefaultValue = false)]
        public string ImageAspectRatio { get; set; }

        /// <summary>
        /// Gets or Sets ImageSize
        /// </summary>
        [DataMember(Name = "imageSize", EmitDefaultValue = false)]
        public string ImageSize { get; set; }

        /// <summary>
        /// Gets or Sets ImageBackgroundColor
        /// </summary>
        [DataMember(Name = "imageBackgroundColor", EmitDefaultValue = false)]
        public string ImageBackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAction
        /// </summary>
        [DataMember(Name = "defaultAction", EmitDefaultValue = false)]
        public Action DefaultAction { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", IsRequired = true, EmitDefaultValue = true)]
        public List<Action> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ButtonsTemplate {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ThumbnailImageUrl: ").Append(ThumbnailImageUrl).Append("\n");
            sb.Append("  ImageAspectRatio: ").Append(ImageAspectRatio).Append("\n");
            sb.Append("  ImageSize: ").Append(ImageSize).Append("\n");
            sb.Append("  ImageBackgroundColor: ").Append(ImageBackgroundColor).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  DefaultAction: ").Append(DefaultAction).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
